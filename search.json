[{"path":"https://bjoernrohr.github.io/sampcompR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bjoern Rohr. Author, maintainer, copyright holder. Barbara Felderer. Author.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rohr B, Felderer B (2025). sampcompR: Comparing Visualizing Differences Surveys. R package version 0.3.1, https://bjoernrohr.github.io/sampcompR/.","code":"@Manual{,   title = {sampcompR: Comparing and Visualizing Differences Between Surveys},   author = {Bjoern Rohr and Barbara Felderer},   year = {2025},   note = {R package version 0.3.1},   url = {https://bjoernrohr.github.io/sampcompR/}, }"},{"path":"https://bjoernrohr.github.io/sampcompR/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Comparing and Visualizing Differences Between Surveys","title":"Comparing and Visualizing Differences Between Surveys","text":"beta version sampcompR. still development may contain bugs. use package bug crosses way, feel free contact Author (bjoern.rohr@gesis.org).","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/index.html","id":"sampcompr","dir":"","previous_headings":"","what":"sampcompR","title":"Comparing and Visualizing Differences Between Surveys","text":"SampcompR aims compare similarity one data frames one benchmark data frames. done univariate, bivariate, multivariate level. main intention package compare surveys benchmark surveys, although comparisons also viable. (e.g., mode-comparisons) univariate level, variables name data frames benchmarks compared using one different measures. plot can generated visualize differences present value indicating overall difference variables (e.g., average difference, RMSE). bivariate level, Pearson’s r values can compared data frames benchmarks. results comparison can also visualized plot form heatmap. Last, multivariate level, package can compare visualize multivariate regression models data frames benchmarks.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Comparing and Visualizing Differences Between Surveys","text":"can install development version sampcompR like :","code":"### Install the dependencies install.packages(\"devtools\")  # install.packages(c(\"boot\", boot.pval, \"data.table\", \"dplyr\", \"ggplot2\", \"Hmisc\", \"jtools\",\"lmtest\", \"magrittr\", \"margins\", \"parallel\", \"psych\", \"reshape2\", \"readr\", \"svrep\", \"sandwich\", \"stats\", \"survey\", \"tidyselect\", \"utils\",\"weights\", \"wooldridge\"))  ### Install the package devtools::install_github(\"BjoernRohr/sampcompR\")  library(sampcompR)"},{"path":[]},{"path":"https://bjoernrohr.github.io/sampcompR/index.html","id":"prepare-the-data","dir":"","previous_headings":"Example","what":"Prepare the Data","title":"Comparing and Visualizing Differences Between Surveys","text":"using package, first step load data. essential variables comparison data frames respective benchmark data frames need named . Additionally, best try measure constructs similarly. example, want compare two surveys, best questions used respective surveys variables comparison. example, use card data frame wooldrige package base split different sub-data frames. keep examples simple, use design weights, although design weights can make huge difference. Separating respondents live North white respondents lets us estimate bias data frame, occur, respondents sampled, results nevertheless generalized whole population. subgroups chosen due availability data frame. Nonetheless, similar use case occur real situation, example analyse bias mixed mode survey, one mode used conduct .","code":"# install and load some additional packages for this readme #install.packages(\"magrittr\",\"knitr\",\"kableExtra\") library(magrittr) library(knitr) library(kableExtra)  data(\"card\") whole_card<-card # the full survey  # we recode the married variable to a dummy, idicating of the respondents are married or not, which will be needed later.  whole_card$married[whole_card$married!=1]<-0  north<-whole_card[whole_card$south==0,] # only respondets that lived in the north white<-whole_card[whole_card$black==0,] # only white respondets.   ### install some other"},{"path":"https://bjoernrohr.github.io/sampcompR/index.html","id":"univariate-comparison","dir":"","previous_headings":"Example","what":"Univariate Comparison","title":"Comparing and Visualizing Differences Between Surveys","text":"Now data frames want compare gathered similarly, start univariate comparison.  can see plot showing difference mean several variables (indicated variables parameter) data frames. first data frame, named character dfs, compared first data frame benchmarks, second compared second, forth. Another important parameter nboots. indicates number bootstraps calculate confidence intervals. recommend using least 2000 10000 bootstraps, although may take . also possible set nboots==0, example. case, confidence intervals calculated analytically. upper right corner plot shows average relative difference mean, chosen using summetric==\"avg2\". Last, parameter data indicates function return uni_compare_object can used package functions (e.g., plot_uni_compare). Also, difference can shown table can helpful document results. can easily get good result table adding resulting table functions (e.g., kable() function RMarkdown). Table 1 Difference Relative Means different Survey Groups table displays difference dfs benchmarks variables, confidence intervals, summary metric specified creating uni_compare_object every comparison. can see table, well plot , surveying respondents living North let overestimation education, wage IQ, however age estimated rather similar. find similar results second comparison. cause data frame example rather dated newer data frame might led different results.","code":"library(sampcompR)  univar_data<-sampcompR::uni_compare(dfs = c(\"north\",\"white\"),                                     benchmarks = c(\"whole_card\",\"whole_card\"),                                     variables=c(\"age\",\"educ\",\"fatheduc\",                                                 \"motheduc\",\"wage\",\"IQ\"),                                     funct = \"rel_mean\",                                     nboots=0,                                     summetric=\"avg2\",                                     data=T,type = \"comparison\") #>  #> Attache Paket: 'purrr' #> Das folgende Objekt ist maskiert 'package:magrittr': #>  #>     set_names #> survey 1 of 2 is compared #> survey 2 of 2 is compared sampcompR::plot_uni_compare(univar_data) uni_output_table<-sampcompR::uni_compare_table(univar_data) #> Warning: Returning more (or less) than 1 row per `summarise()` group was deprecated in #> dplyr 1.1.0. #> ℹ Please use `reframe()` instead. #> ℹ When switching from `summarise()` to `reframe()`, remember that `reframe()` #>   always returns an ungrouped data frame and adjust accordingly. #> ℹ The deprecated feature was likely used in the sampcompR package. #>   Please report the issue to the authors. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://bjoernrohr.github.io/sampcompR/index.html","id":"bivariate-comparison","dir":"","previous_headings":"Example","what":"Bivariate Comparison","title":"Comparing and Visualizing Differences Between Surveys","text":"univariate comparison, start general function calculate bivariate difference data frames plot results.  comparison, Pearson’s r correlations variables indicated variables parameter compared data frames benchmarks. plotted heatmap shows difference three categories. correlation green () one two reasons. one hand, can Pearson’s r correlation variable pair significant data frame benchmark. hand, can z standardized Pearson’s r values significantly different. neither conditions true, plot’s correlations marked yellow (Small Diff) red (Large Diff). red, must also fulfill one two additional conditions. Pearson’s r correlations different directions (e.g., one positive, negative). Second, one double size . example, can see left survey containing respondents living North different complete survey regarding investigated bivariate correlations. 46.7% correlations similar groups () lead similar interpretations measured either group survey. 40.0% correlations show minor differences (Small Diff), meaning similar interpretations may guaranteed, 13.3% correlations different (Large Diff) groups. right half plot shows comparison white respondents whole survey, similar results found. , can also take closer look exact values putting biv_compare_object biv_compare_table function package. Table 2 Difference Pearson’s r North/South Sample Using type = diff gives us matrix difference Pearson’s r surveys, comparison_number = 1 indicates table first comparison (thenorth whole sample). can see correlations significantly differ surveys extent. However, know colors plot, must also look individual correlation matrices surveys. look tables comparing north versus whole sample respondents example. Table 3 Pearson’s r correlation matrix North Sample Table 4 Pearson’s r correlation matrix Whole Crad Survey shows us whole picture. Looking correlation wage fathers education, example, can see correlations surveys different. , correlation positive small north group, stronger whole survey. , addition conditions slight difference, one condition Large Diff true (.e., one Pearson’s r value least double size , 0.09 vs. 0.19). Therefore, come different conclusions measuring correlations either group.","code":"biv_data<-sampcompR::biv_compare(dfs = c(\"north\",\"white\"),                                  benchmarks = c(\"whole_card\",\"whole_card\"),                                  variables= c(\"age\",\"educ\",\"fatheduc\",                                              \"motheduc\",\"wage\",\"IQ\"),                                  data=T, corrtype = \"rho\",                                  weight = \"weight\",                                  id=\"id\") #> survey 1 of 2 is compared #> survey 2 of 2 is compared  sampcompR::plot_biv_compare(biv_data) # Difference correlation matrix of the first comparison table_biv1<-sampcompR::biv_compare_table(biv_data,type = \"diff\",comparison_number=1) # North correlation matrix of the first comparison table_biv2<-sampcompR::biv_compare_table(biv_data,type = \"dfs\",comparison_number=1)   # South correlation matrix of the first comparison table_biv3<-sampcompR::biv_compare_table(biv_data,type = \"benchmarks\",comparison_number=1)"},{"path":"https://bjoernrohr.github.io/sampcompR/index.html","id":"multivariate-comparison","dir":"","previous_headings":"Example","what":"Multivariate Comparison","title":"Comparing and Visualizing Differences Between Surveys","text":"want know different certain data frames sub-data frames , may also interesting see differences exist multivariate comparisons. , first step choose multivariate models want compare. function (multi_compare()) restricted model commutable glm() (without weighting) svyglm() (weights provided). example, want see differences groups looking regression age, father's education, mother's education, IQ wage education. choosing independent dependent variables, information can given multi_compare(). comparison, three similar regression models performed. One model either survey one model combined surveys, including interaction variable indicates survey respondents . , every coefficient, similar classification used, bivariate comparison:  plot looks similar bivariate comparison, except every row shows coefficient every column shows model. green color () indicates coefficient significantly different models performed individual surveys interaction effect model pooled data frames significant. Similarly, yellow (Small Diff) red (Large Diff) indicates coefficient significant one base models, interaction effect significant pooled models. conditions true, red (Large Diff) coefficients differ direction one size yellow (Small Diff) otherwise. can see models, bivariate comparison, differences, least models compared. Also, can see differences wage variable found previous comparisons present multivariate model. However, even multivariate regression, education seems prone group differences. addition models, can answer ols regression, also interesting add model estimating effect coefficients probability marriage. However, , need logit regression, now follows.  performing comparison method = logit, new dependent variable, still interesting plot models together. can done function multi_compare_merge, adds multi_compare_objects together use newly created objects plot. shows us addition education model, marriage model, coefficient different white respondents models conducted whole survey. also add objects provided table function look differences closer. Table 5 Multivariate Comparison Subgroups Card Sample : Interaction Models Table 6 Multivariate Comparison Subgroups Card Sample : North Black Sample Models Table 7 Multivariate Comparison Subgroups Card Sample : South White Sample Models Overall comparison shows differences sub-groups whole survey. Suppose models play role overall analyses research project, one come similar results using survey. words, multivariate models, find bias, sampled parts population. Nonetheless, models, bias can prevalent.","code":"# designate dependent variables  dependent_ols<-c(\"wage\",\"educ\")  # designate independent variables independent<-c(\"age\",\"fatheduc\",\"motheduc\",\"IQ\")  # compare the north and south data frames multi_data1_ols<-sampcompR::multi_compare(df=north,                                       bench=whole_card,                                      independent = independent,                                      dependent = dependent_ols,                                      family = \"ols\")   #>  #> Difference in coeficients between sets of respondents  #>   #>          wage         educ         #> age      -8.55e-01    -2.43e-02    #> fatheduc -2.93e-01    -2.37e-02    #> motheduc 2.35e+00     1.23e-02     #> IQ       4.80e-01     -7.25e-03    #>  #> Overall difference between north & whole_card: 0% of coeficients are significant different #> (*p<0.05 ; **p<0.005 ; ***p<0.001;  for t-test robust standard errors are used)  #>   # compare the black and white data frames multi_data2_ols<-sampcompR::multi_compare(df=white,                                       bench=whole_card,                                      independent = independent,                                      dependent = dependent_ols,                                      family = \"ols\") #>  #> Difference in coeficients between sets of respondents  #>   #>          wage         educ         #> age      -9.51e-01    -1.20e-02    #> fatheduc 1.28e-01     -1.45e-02    #> motheduc 2.03e-01     9.99e-03     #> IQ       3.61e-01     -9.28e-03    #>  #> Overall difference between white & whole_card: 0% of coeficients are significant different #> (*p<0.05 ; **p<0.005 ; ***p<0.001;  for t-test robust standard errors are used)  #>   # plot the results sampcompR::plot_multi_compare(c(\"multi_data1_ols\",\"multi_data2_ols\"),                              plots_label=c(\"north\",\"white\")) # logit dependent variable   dependent_log<-c(\"married\")   # compare the north and south data frames multi_data1_log<-sampcompR::multi_compare(df=north,                                       bench=whole_card,                                      independent = independent,                                      dependent = dependent_log,                                      family = \"logit\")   #>  #> Difference in coeficients between sets of respondents  #>   #>          married      #> age      5.37e-03     #> fatheduc -3.82e-03    #> motheduc 8.77e-03     #> IQ       -6.37e-06    #>  #> Overall difference between north & whole_card: 0% of coeficients are significant different #> (*p<0.05 ; **p<0.005 ; ***p<0.001;  for t-test robust standard errors are used)  #>   # compare the black and white data frames multi_data2_log<-sampcompR::multi_compare(df=white,                                       bench=whole_card,                                      independent = independent,                                      dependent = dependent_log,                                      family = \"logit\") #>  #> Difference in coeficients between sets of respondents  #>   #>          married      #> age      -1.40e-03    #> fatheduc 1.46e-02     #> motheduc -2.47e-02    #> IQ       6.73e-03     #>  #> Overall difference between white & whole_card: 0% of coeficients are significant different #> (*p<0.05 ; **p<0.005 ; ***p<0.001;  for t-test robust standard errors are used)  #>    # merge those  multi_compare_objects to the ols based objects  final_multi1<-sampcompR::multi_compare_merge(multi_data1_ols,multi_data1_log)  final_multi2<-sampcompR::multi_compare_merge(multi_data2_ols,multi_data2_log)   # plot the models together sampcompR::plot_multi_compare(c(\"final_multi1\",\"final_multi2\"),                              plots_label=c(\"north\",\"black\")) ### difference table multi_table1 <- sampcompR::multi_compare_table(c(\"final_multi1\",\"final_multi2\"),type=\"diff\") multi_table2 <-sampcompR::multi_compare_table(c(\"final_multi1\",\"final_multi2\"),type=\"dfs\") multi_table3 <-sampcompR::multi_compare_table(c(\"final_multi1\",\"final_multi2\"),type=\"benchmarks\")"},{"path":"https://bjoernrohr.github.io/sampcompR/index.html","id":"further-use-cases","dir":"","previous_headings":"","what":"Further Use-Cases","title":"Comparing and Visualizing Differences Between Surveys","text":"shown, package can handy finding differences groups, come handy, example, robustness checks research paper. However, group comparisons one possible use case. examples comparing survey respondents non-respondents (e.g., comparing information known sample frame probability surveys) comparing two survey modes sample gathered using differing modes. recent paper (Rohr et al., 2024), used package (created designed context) compare several non-probability probability surveys benchmark survey.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/index.html","id":"components-of-the-package","dir":"","previous_headings":"","what":"Components of the package","title":"Comparing and Visualizing Differences Between Surveys","text":"general, package’s functions can ordered one four categories. using functions package, also makes sense take look help section, include optional parameters, example, weight data include p_value adjustment (e.g., Bonferroni adjustment) adjust problem multiple comparisons.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/index.html","id":"univariate-comparison-functions","dir":"","previous_headings":"Components of the package","what":"Univariate Comparison Functions","title":"Comparing and Visualizing Differences Between Surveys","text":"uni_compare() can used make univariate comparison get object usable univariate comparison functions plot results directly. plot_uni_compare() can used plot results uni_compare() function. uni_compare_table() can used get table results uni_compare() function. R_indicator calculates R-Indicator Survey.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/index.html","id":"bivariate-comparison-functions","dir":"","previous_headings":"Components of the package","what":"Bivariate Comparison Functions","title":"Comparing and Visualizing Differences Between Surveys","text":"biv_compare() can used make bivariate comparison get object usable bivariate comparison functions plot results directly. plot_biv_compare() can used plot results biv_compare() function. biv_compare_table() can used get table results biv_compare() function.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/index.html","id":"multivariate-comparison-functions","dir":"","previous_headings":"Components of the package","what":"Multivariate Comparison Functions","title":"Comparing and Visualizing Differences Between Surveys","text":"multi_compare() can used make multivariate comparison get object usable bivariate comparison functions plot results directly. suitable compare glm() model data frame benchmark plot_multi_compare() can used plot results multi_compare() function. multi_compare_table() can used get table results multi_compare() function. multi_compare_merge() can combine objects multi_compare() function, plot together.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/index.html","id":"miscellaneous-functions","dir":"","previous_headings":"Components of the package","what":"Miscellaneous Functions","title":"Comparing and Visualizing Differences Between Surveys","text":"dataequalizer() can used reduce one data frame columns named similarly another data frame list variables given function. descriptive_table can used get descriptive table data frame, including weighting.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Comparing and Visualizing Differences Between Surveys","text":"Rohr, B., Silber, H., & Felderer, B. (2024). Comparing Accuracy Univariate, Bivariate, Multivariate Estimates across Probability Nonprobability Surveys Population Benchmarks. Sociological Methodology, 00811750241280963. https://doi.org/10.1177/00811750241280963","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/R_indicator.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the R-Indicator — R_indicator","title":"Calculate the R-Indicator — R_indicator","text":"Calculates R-Indicator (weighted) data frame.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/R_indicator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the R-Indicator — R_indicator","text":"","code":"R_indicator(   dfs,   response_identificators,   variables,   id = NULL,   weight = NULL,   strata = NULL,   get_r2 = FALSE )"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/R_indicator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the R-Indicator — R_indicator","text":"dfs character vector containing names data frames calculate R indicator. response_identificators character vector, naming response identificators every df. Response identificators indicate respondents part set respondents (respondents = 1) part set respondents. (non-respondents = 0). one character provided, variable used every df. variables character vector names variables used model calculate R indicator. id character vector determines id variables used weight dfs help survey package. part respective data frame. one character provided, variable used weight every df. weight character vector determines variables weight dfs. part respective data frame. one character provided, variable used weight every df. weight variable provided also id variable needed. weighting, survey package used. strata character vector determines strata variables used weight dfs help survey package. part respective data frame. one character provided, variable used weight every df. get_r2 true, Pseudo R-squared propensity model returned, based method McFadden.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/R_indicator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the R-Indicator — R_indicator","text":"list containing R-indicator, standard error every data frame.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/R_indicator.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate the R-Indicator — R_indicator","text":"calculated R-indicator based Shlomo et al., (2012).","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/R_indicator.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the R-Indicator — R_indicator","text":"Shlomo, N., Skinner, C., & Schouten, B. (2012). Estimation indicator representativeness survey response. Journal Statistical Planning Inference, 142(1), 201–211. https://doi.org/10.1016/j.jspi.2011.07.008","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/R_indicator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the R-Indicator — R_indicator","text":"","code":"data(\"card\")  # For the purpose of this example, we assume that only respondents living in  # the south or only white respondents have participated in the survey.  sampcompR::R_indicator(dfs=c(\"card\",\"card\"),                        response_identificators = c(\"south\",\"black\"),                        variables = c(\"age\",\"educ\",\"fatheduc\",\"motheduc\",\"wage\",\"IQ\"),                        weight = c(\"weight\",\"weight\")) #> $card #>  R-Indicator           SE  #> 0.8610737759 0.0001926046  #>  #> $card #>  R-Indicator           SE  #> 0.8533648522 0.0006574589  #>"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_bias_per_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a table based on the information of a biv_compare_object that indicates the Average Absolute Bias (AARB) in Pearson's r or the Average Absolute Relative Bias (AARB) in Pearson's r for every data frame It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_bias_per_variable","title":"Returns a table based on the information of a biv_compare_object that indicates the Average Absolute Bias (AARB) in Pearson's r or the Average Absolute Relative Bias (AARB) in Pearson's r for every data frame It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_bias_per_variable","text":"Returns table based information biv_compare_object indicates Average Absolute Bias (AARB) Pearson's r Average Absolute Relative Bias (AARB) Pearson's r every data frame can outputted HTML LaTex Table, example help stargazer function.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_bias_per_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a table based on the information of a biv_compare_object that indicates the Average Absolute Bias (AARB) in Pearson's r or the Average Absolute Relative Bias (AARB) in Pearson's r for every data frame It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_bias_per_variable","text":"","code":"biv_bias_per_variable(   biv_compare_object,   type = \"rel_diff\",   final_col = \"difference\",   ndigits = 3,   varlabels = NULL,   label_df = NULL )"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_bias_per_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a table based on the information of a biv_compare_object that indicates the Average Absolute Bias (AARB) in Pearson's r or the Average Absolute Relative Bias (AARB) in Pearson's r for every data frame It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_bias_per_variable","text":"biv_compare_object object returned biv_compare function. type character string, \"AAB\" Average Absolute Bias per variable displayed table, \"AARB\" Average Absolute Relative Bias per Variable displayed table. final_col character string, indicating last column table display average bias per variable data frames (\"average\"), difference first average bias first last data frame (\"difference\"). ndigits Number digits shown table. varlabels character vector containing labels variables. label_df character vector containing labels data frames.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_bias_per_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a table based on the information of a biv_compare_object that indicates the Average Absolute Bias (AARB) in Pearson's r or the Average Absolute Relative Bias (AARB) in Pearson's r for every data frame It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_bias_per_variable","text":"matrix, shows Average Absolute Bias (AAB) Average Absolute Relative Bias (AARB) every individual variable. given separately every comparison data frame, well averaged comparisons, difference first last comparison.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_bias_per_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a table based on the information of a biv_compare_object that indicates the Average Absolute Bias (AARB) in Pearson's r or the Average Absolute Relative Bias (AARB) in Pearson's r for every data frame It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_bias_per_variable","text":"","code":"data(\"card\")  north <- card[card$south==0,] white <- card[card$black==0,]  ## use the function to plot the data  bivar_data<-sampcompR::biv_compare(dfs = c(\"north\",\"white\"),                                    benchmarks = c(\"card\",\"card\"),                                    variables= c(\"age\",\"educ\",\"fatheduc\",\"motheduc\",\"wage\",\"IQ\"),                                    data=TRUE) #> Error in get(dfs[i]): object 'north' not found  table1<-sampcompR::biv_bias_per_variable(bivar_data,type=\"rel_diff\",                                          final_col=\"average\",ndigits=2) #> Error: object 'bivar_data' not found noquote(table1) #> Error: object 'table1' not found  table2<-sampcompR::biv_bias_per_variable(bivar_data,type = \"diff\",                                          final_col=\"difference\",ndigits=2) #> Error: object 'bivar_data' not found noquote(table2) #> Error: object 'table2' not found"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Multiple Data Frames on a Bivariate Level — biv_compare","title":"Compare Multiple Data Frames on a Bivariate Level — biv_compare","text":"Compare multiple data frames bivariate level plot together.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Multiple Data Frames on a Bivariate Level — biv_compare","text":"","code":"biv_compare(   dfs,   benchmarks,   variables = NULL,   corrtype = \"r\",   data = TRUE,   id = NULL,   weight = NULL,   strata = NULL,   id_bench = NULL,   weight_bench = NULL,   strata_bench = NULL,   p_value = NULL,   p_adjust = NULL,   varlabels = NULL,   plot_title = NULL,   plots_label = NULL,   diff_perc = TRUE,   diff_perc_size = 4.5,   perc_diff_transparance = 0,   note = FALSE,   order = NULL,   breaks = NULL,   colors = NULL,   mar = c(0, 0, 0, 0),   grid = \"white\",   gradient = FALSE,   sum_weights = NULL,   missings_x = TRUE,   remove_nas = \"pairwise\",   ncol_facet = 3,   nboots = 0,   boot_all = FALSE,   parallel = FALSE,   adjustment_weighting = \"raking\",   adjustment_vars = NULL,   raking_targets = NULL,   post_targets = NULL,   percentile_ci = TRUE )"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Multiple Data Frames on a Bivariate Level — biv_compare","text":"dfs character vector containing names data frames compare benchmarks. benchmarks character vector containing names benchmarks compare dfs , names list. list, form, output rcorr, Pearson's r matrix first position, n-matrix (matrix n every correlation) second position p-matrix third position. vector must either length dfs, length 1. length one every survey compared benchmark. variables character vector containes names variables comparison. NULL, variables named similarly dfs benchmarks compared. Variables missing one dfs benchmarks neglected comparison. corrtype character string, indicating type bivariate correlation. can either \"r\" Pearson's r \"rho\" Spearman's \"rho\". moment, rho applicable unweighted data. data TRUE, biv_compare object returned, containing results comparison. strata, strata_bench character vector determines strata variables used weigh dfs benchmarks help survey package. part respective data frame. fewer characters strings provided, dfs, first input used weigh every df benchmark, input provided. id_bench, id character vector determining id variables used weigh dfs benchmarks help survey package. part respective data frame. less characters strings provided, dfs, first input used weigh every df benchmark, input provided. weight_bench, weight character vector determines variables weigh dfs benchmarks. part respective data frame. fewer characters strings provided, dfs, first input used weigh every df benchmark, input provided. weight variable provided also id variable needed. weighting, survey package used. p_value number zero one determine maximum significance niveau. p_adjust Can either TRUE character string indicating adjustment method. p_adjust = TRUE p_values adjusted Bonferroni adjustment method, default, account problem multiple comparisons. adjustment methods available p.adjust can used , character strings. varlabels character string vector character strings containing new names variables used plot. plot_title character string containing title plot. plots_label character string vector character strings containing new names data frames used plot. diff_perc TRUE percental difference surveys benchmarks displayed plot. diff_perc_size number determine size displayed percental difference surveys plot. perc_diff_transparance number determine transparency displayed percental difference surveys plot. note note = TRUE, note displayed describe plot. order character vector determine order variables displayed plot. breaks vector label color scheme legend. colors vector determine colors plot. mar vector determines margins plot. grid color string, determines color lines tiles heatmap. gradient gradient = TRUE, colors heatmap less transparent, depending difference Pearson's r data frames comparison. sum_weights vector containing information every variable weigh displayed percental-difference calculation. can used variables - underrepresented analysis. missings_x TRUE, missing pairs plot marked X. remove_nas character string, indicates missing values removed, can either \"\", remove cases contain NA variables, \"pairwise\", remove NAs separately every variable pair calculating Pearson's r. ncol_facet number columns used faced_wrap() plots. nboots numeric value indicating number bootstrap replications. nboots = 0 bootstrapping performed. Else nboots must >2. Note, bootstrapping can computationally heavy can therefore take . boot_all TURE, , dfs benchmarks bootstrapped. Otherwise benchmark estimate assumed constant. parallel Can either FALSE number cores used function. FALSE, one core used otherwise given number cores used. adjustment_weighting character vector indicating adjustment weighting used. can either \"raking\" \"post_start\". adjustment_vars Variables used adjust survey using raking post-stratification. raking_targets list raking targets can given rake function rake, rake dfs. post_targets list post_stratification targets can given postStratify function, post-stratify dfs. percentile_ci TURE, cofidence intervals calculated using percentile method. False, calculated using normal method.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Multiple Data Frames on a Bivariate Level — biv_compare","text":"object generated help ggplot2::ggplot2() visualizes differences data frames benchmarks. data = TRUE instead plot list returned containing information analyses. biv_compare object can used plot_biv_compare build plot, biv_compare_table, get table.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_compare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare Multiple Data Frames on a Bivariate Level — biv_compare","text":"plot shows heatmap correlation matrix, colors determined similarity Pearson's r values sets respondents. Leaving default breaks colors, (green) indicates, Pearson's r correlation significant > 0 related data frame benchmark Pearson's r correlations significantly different, data frame benchmark. Small Diff (yellow) indicates Pearson's r correlation significant > 0 related data frame benchmark Pearson's r correlations significantly different, data frame benchmark. Large Diff (red) indicates, conditions yellow fulfilled, correlations either opposite directions,one double size .","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Multiple Data Frames on a Bivariate Level — biv_compare","text":"","code":"## Get Data for comparison  data(\"card\")  north <- card[card$south==0,] white <- card[card$black==0,]  ## use the function to plot the data  bivar_comp<-sampcompR::biv_compare(dfs = c(\"north\",\"white\"),                                    benchmarks = c(\"card\",\"card\"),                                    variables= c(\"age\",\"educ\",\"fatheduc\",\"motheduc\",\"wage\",\"IQ\"),                                    data=FALSE) #> Error in get(dfs[i]): object 'north' not found bivar_comp #> Error: object 'bivar_comp' not found"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_compare_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a table based on the information of a biv_compare_object which can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_compare_table","title":"Returns a table based on the information of a biv_compare_object which can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_compare_table","text":"Returns table based information biv_compare_object can outputted HTML LaTex Table, example help stargazer function.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_compare_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a table based on the information of a biv_compare_object which can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_compare_table","text":"","code":"biv_compare_table(   biv_compare_object,   type = \"diff\",   comparison_number = 1,   ndigits = 2 )"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_compare_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a table based on the information of a biv_compare_object which can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_compare_table","text":"biv_compare_object object returned biv_compare function. type character string, choose matrix printed. \"dfs\", correlation matrix variables comparison chosen dataframe returned. \"benchmarks\", correlation matrix variables comparison chosen benchmark returned. \"diff\", matrix indicating difference chosen dataframe benchmark returned. comparison_number number indicating data data frame, benchmark comparison displayed. maximum length equal length dfs vector used generate biv_compare_object. ndigits Number digits shown table.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_compare_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a table based on the information of a biv_compare_object which can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_compare_table","text":"correlation matrix, difference matrix based information biv_compare_object.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_compare_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a table based on the information of a biv_compare_object which can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_compare_table","text":"","code":"## Get Data for comparison  data(\"card\")  north <- card[card$south==0,] white <- card[card$black==0,]  ## use the function to plot the data  bivar_data<-sampcompR::biv_compare(dfs = c(\"north\",\"white\"),                                    benchmarks = c(\"card\",\"card\"),                                    variables= c(\"age\",\"educ\",\"fatheduc\",\"motheduc\",\"wage\",\"IQ\"),                                    data=TRUE) #> Error in get(dfs[i]): object 'north' not found                          table<-sampcompR::biv_compare_table(bivar_data, type=\"diff\", comparison_number=1) #> Error: object 'bivar_data' not found noquote(table) #> function (..., exclude = if (useNA == \"no\") c(NA, NaN), useNA = c(\"no\",  #>     \"ifany\", \"always\"), dnn = list.names(...), deparse.level = 1)  #> { #>     list.names <- function(...) { #>         l <- as.list(substitute(list(...)))[-1L] #>         if (length(l) == 1L && is.list(..1) && !is.null(nm <- names(..1)))  #>             return(nm) #>         nm <- names(l) #>         fixup <- if (is.null(nm))  #>             seq_along(l) #>         else nm == \"\" #>         dep <- vapply(l[fixup], function(x) switch(deparse.level +  #>             1, \"\", if (is.symbol(x)) as.character(x) else \"\",  #>             deparse(x, nlines = 1)[1L]), \"\") #>         if (is.null(nm))  #>             dep #>         else { #>             nm[fixup] <- dep #>             nm #>         } #>     } #>     miss.use <- missing(useNA) #>     miss.exc <- missing(exclude) #>     useNA <- if (miss.use && !miss.exc && !match(NA, exclude,  #>         nomatch = 0L))  #>         \"ifany\" #>     else match.arg(useNA) #>     doNA <- useNA != \"no\" #>     if (!miss.use && !miss.exc && doNA && match(NA, exclude,  #>         nomatch = 0L))  #>         warning(\"'exclude' containing NA and 'useNA' != \\\"no\\\"' are a bit contradicting\") #>     args <- list(...) #>     if (length(args) == 1L && is.list(args[[1L]])) { #>         args <- args[[1L]] #>         if (length(dnn) != length(args))  #>             dnn <- paste(dnn[1L], seq_along(args), sep = \".\") #>     } #>     if (!length(args))  #>         stop(\"nothing to tabulate\") #>     bin <- 0L #>     lens <- NULL #>     dims <- integer() #>     pd <- 1L #>     dn <- NULL #>     for (a in args) { #>         if (is.null(lens))  #>             lens <- length(a) #>         else if (length(a) != lens)  #>             stop(\"all arguments must have the same length\") #>         fact.a <- is.factor(a) #>         if (doNA)  #>             aNA <- anyNA(a) #>         if (!fact.a) { #>             a0 <- a #>             op <- options(warn = 2) #>             on.exit(options(op)) #>             a <- factor(a, exclude = exclude) #>             options(op) #>         } #>         add.na <- doNA #>         if (add.na) { #>             ifany <- (useNA == \"ifany\") #>             anNAc <- anyNA(a) #>             add.na <- if (!ifany || anNAc) { #>                 ll <- levels(a) #>                 if (add.ll <- !anyNA(ll)) { #>                   ll <- c(ll, NA) #>                   TRUE #>                 } #>                 else if (!ifany && !anNAc)  #>                   FALSE #>                 else TRUE #>             } #>             else FALSE #>         } #>         if (add.na)  #>             a <- factor(a, levels = ll, exclude = NULL) #>         else ll <- levels(a) #>         a <- as.integer(a) #>         if (fact.a && !miss.exc) { #>             ll <- ll[keep <- which(match(ll, exclude, nomatch = 0L) ==  #>                 0L)] #>             a <- match(a, keep) #>         } #>         else if (!fact.a && add.na) { #>             if (ifany && !aNA && add.ll) { #>                 ll <- ll[!is.na(ll)] #>                 is.na(a) <- match(a0, c(exclude, NA), nomatch = 0L) >  #>                   0L #>             } #>             else { #>                 is.na(a) <- match(a0, exclude, nomatch = 0L) >  #>                   0L #>             } #>         } #>         nl <- length(ll) #>         dims <- c(dims, nl) #>         if (prod(dims) > .Machine$integer.max)  #>             stop(\"attempt to make a table with >= 2^31 elements\") #>         dn <- c(dn, list(ll)) #>         bin <- bin + pd * (a - 1L) #>         pd <- pd * nl #>     } #>     names(dn) <- dnn #>     bin <- bin[!is.na(bin)] #>     if (length(bin))  #>         bin <- bin + 1L #>     y <- array(tabulate(bin, pd), dims, dimnames = dn) #>     class(y) <- \"table\" #>     y #> } #> <bytecode: 0x563b2db98ea8> #> <environment: namespace:base>"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_per_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a table based on the information of a biv_compare_object that indicates the proportion of biased variables. It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_per_variable","title":"Returns a table based on the information of a biv_compare_object that indicates the proportion of biased variables. It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_per_variable","text":"Returns table based information biv_compare_object indicates proportion biased variables. can outputted HTML LaTex Table, example help stargazer function.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_per_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a table based on the information of a biv_compare_object that indicates the proportion of biased variables. It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_per_variable","text":"","code":"biv_per_variable(   biv_compare_object,   ndigits = 1,   varlabels = NULL,   label_df = NULL )"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_per_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a table based on the information of a biv_compare_object that indicates the proportion of biased variables. It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_per_variable","text":"biv_compare_object object returned biv_compare function. ndigits Number digits shown table. varlabels character vector containing labels variables. label_df character vector containing labels data frames.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_per_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a table based on the information of a biv_compare_object that indicates the proportion of biased variables. It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_per_variable","text":"matrix, indicates proportion bias every individual variable. given separately every comparison, well averaged comparisons.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/biv_per_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a table based on the information of a biv_compare_object that indicates the proportion of biased variables. It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — biv_per_variable","text":"","code":"data(\"card\")  north <- card[card$south==0,] white <- card[card$black==0,]  ## use the function to plot the data  bivar_data<-sampcompR::biv_compare(dfs = c(\"north\",\"white\"),                                    benchmarks = c(\"card\",\"card\"),                                    variables= c(\"age\",\"educ\",\"fatheduc\",\"motheduc\",\"wage\",\"IQ\"),                                    data=TRUE) #> Error in get(dfs[i]): object 'north' not found  table<-sampcompR::biv_per_variable(bivar_data) #> Error: object 'bivar_data' not found noquote(table) #> function (..., exclude = if (useNA == \"no\") c(NA, NaN), useNA = c(\"no\",  #>     \"ifany\", \"always\"), dnn = list.names(...), deparse.level = 1)  #> { #>     list.names <- function(...) { #>         l <- as.list(substitute(list(...)))[-1L] #>         if (length(l) == 1L && is.list(..1) && !is.null(nm <- names(..1)))  #>             return(nm) #>         nm <- names(l) #>         fixup <- if (is.null(nm))  #>             seq_along(l) #>         else nm == \"\" #>         dep <- vapply(l[fixup], function(x) switch(deparse.level +  #>             1, \"\", if (is.symbol(x)) as.character(x) else \"\",  #>             deparse(x, nlines = 1)[1L]), \"\") #>         if (is.null(nm))  #>             dep #>         else { #>             nm[fixup] <- dep #>             nm #>         } #>     } #>     miss.use <- missing(useNA) #>     miss.exc <- missing(exclude) #>     useNA <- if (miss.use && !miss.exc && !match(NA, exclude,  #>         nomatch = 0L))  #>         \"ifany\" #>     else match.arg(useNA) #>     doNA <- useNA != \"no\" #>     if (!miss.use && !miss.exc && doNA && match(NA, exclude,  #>         nomatch = 0L))  #>         warning(\"'exclude' containing NA and 'useNA' != \\\"no\\\"' are a bit contradicting\") #>     args <- list(...) #>     if (length(args) == 1L && is.list(args[[1L]])) { #>         args <- args[[1L]] #>         if (length(dnn) != length(args))  #>             dnn <- paste(dnn[1L], seq_along(args), sep = \".\") #>     } #>     if (!length(args))  #>         stop(\"nothing to tabulate\") #>     bin <- 0L #>     lens <- NULL #>     dims <- integer() #>     pd <- 1L #>     dn <- NULL #>     for (a in args) { #>         if (is.null(lens))  #>             lens <- length(a) #>         else if (length(a) != lens)  #>             stop(\"all arguments must have the same length\") #>         fact.a <- is.factor(a) #>         if (doNA)  #>             aNA <- anyNA(a) #>         if (!fact.a) { #>             a0 <- a #>             op <- options(warn = 2) #>             on.exit(options(op)) #>             a <- factor(a, exclude = exclude) #>             options(op) #>         } #>         add.na <- doNA #>         if (add.na) { #>             ifany <- (useNA == \"ifany\") #>             anNAc <- anyNA(a) #>             add.na <- if (!ifany || anNAc) { #>                 ll <- levels(a) #>                 if (add.ll <- !anyNA(ll)) { #>                   ll <- c(ll, NA) #>                   TRUE #>                 } #>                 else if (!ifany && !anNAc)  #>                   FALSE #>                 else TRUE #>             } #>             else FALSE #>         } #>         if (add.na)  #>             a <- factor(a, levels = ll, exclude = NULL) #>         else ll <- levels(a) #>         a <- as.integer(a) #>         if (fact.a && !miss.exc) { #>             ll <- ll[keep <- which(match(ll, exclude, nomatch = 0L) ==  #>                 0L)] #>             a <- match(a, keep) #>         } #>         else if (!fact.a && add.na) { #>             if (ifany && !aNA && add.ll) { #>                 ll <- ll[!is.na(ll)] #>                 is.na(a) <- match(a0, c(exclude, NA), nomatch = 0L) >  #>                   0L #>             } #>             else { #>                 is.na(a) <- match(a0, exclude, nomatch = 0L) >  #>                   0L #>             } #>         } #>         nl <- length(ll) #>         dims <- c(dims, nl) #>         if (prod(dims) > .Machine$integer.max)  #>             stop(\"attempt to make a table with >= 2^31 elements\") #>         dn <- c(dn, list(ll)) #>         bin <- bin + pd * (a - 1L) #>         pd <- pd * nl #>     } #>     names(dn) <- dnn #>     bin <- bin[!is.na(bin)] #>     if (length(bin))  #>         bin <- bin + 1L #>     y <- array(tabulate(bin, pd), dims, dimnames = dn) #>     class(y) <- \"table\" #>     y #> } #> <bytecode: 0x563b2db98ea8> #> <environment: namespace:base>"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/card.html","id":null,"dir":"Reference","previous_headings":"","what":"card — card","title":"card — card","text":"data, originates D. Card (1995) released Wooldridge R-Package. Sadly wooldridge package (Shea 2023) archived CRAN 3rd December 2024. use , e.g., examples show package works, also added package, can use . cite original description wooldrigde package. Wooldridge Source: D. Card (1995), Using Geographic Variation College Proximity Estimate Return Schooling, Aspects Labour Market Behavior: Essays Honour John Vanderkamp. Ed. L.N. Christophides, E.K. Grant, R. Swidinsky, 201-222. Toronto: University Toronto Press. Professor Card kindly provided data. Data loads lazily.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"card — card","text":"","code":"data('card')"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/card.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"card — card","text":"data.frame 3010 observations 34 variables: id: person identifier nearc2: =1 near 2 yr college, 1966 nearc4: =1 near 4 yr college, 1966 educ: years schooling, 1976 age: years fatheduc: father's schooling motheduc: mother's schooling weight: NLS sampling weight, 1976 momdad14: =1 live mom, dad 14 sinmom14: =1 single mom 14 step14: =1 step parent 14 reg661: =1 region 1, 1966 reg662: =1 region 2, 1966 reg663: =1 region 3, 1966 reg664: =1 region 4, 1966 reg665: =1 region 5, 1966 reg666: =1 region 6, 1966 reg667: =1 region 7, 1966 reg668: =1 region 8, 1966 reg669: =1 region 9, 1966 south66: =1 south 1966 black: =1 black smsa: =1 SMSA, 1976 south: =1 south, 1976 smsa66: =1 SMSA, 1966 wage: hourly wage cents, 1976 enroll: =1 enrolled school, 1976 KWW: knowledge world work score IQ: IQ score married: =1 married, 1976 libcrd14: =1 lib. card home 14 exper: age - educ - 6 lwage: log(wage) expersq: exper^2","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/card.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"card — card","text":"https://www.cengage.com/cgi-wadsworth/course_products_wp.pl?fid=M20b&product_isbn_issn=9781111531041","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/card.html","id":"notes","dir":"Reference","previous_headings":"","what":"Notes","title":"card — card","text":"Computer Exercise C15.3 important analyzing data. , shown instrumental variable, nearc4, actually correlated IQ, least subset men IQ score reported. However, correlation nearc4`` IQ, explanatory variables netted , arguably zero. least, statistically different zero. words, nearc4` fails exogeneity requirement simple regression model passes, least using crude test described , controls added wage equation. advanced course, nice extension Card's analysis allow return education differ race. relatively simple extension include black education (blackeduc) additional explanatory variable; natural instrument blacknearc4. Used Text: pages 526-527, 547","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/card.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"card — card","text":"Shea J (2023). wooldridge: 115 Data Sets \"Introductory Econometrics: Modern Approach, 7e\" Jeffrey M. Wooldridge. R package version 1.4-3, https://CRAN.R-project.org/package=wooldridge.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"card — card","text":"","code":"data(\"card\") str(card) #> 'data.frame':\t3010 obs. of  34 variables: #>  $ id      : int  2 3 4 5 6 7 8 9 10 11 ... #>  $ nearc2  : int  0 0 0 1 1 1 1 1 1 1 ... #>  $ nearc4  : int  0 0 0 1 1 1 1 1 1 1 ... #>  $ educ    : int  7 12 12 11 12 12 18 14 12 12 ... #>  $ age     : int  29 27 34 27 34 26 33 29 28 29 ... #>  $ fatheduc: int  NA 8 14 11 8 9 14 14 12 12 ... #>  $ motheduc: int  NA 8 12 12 7 12 14 14 12 12 ... #>  $ weight  : num  158413 380166 367470 380166 367470 ... #>  $ momdad14: int  1 1 1 1 1 1 1 1 1 1 ... #>  $ sinmom14: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ step14  : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ reg661  : int  1 1 1 0 0 0 0 0 0 0 ... #>  $ reg662  : int  0 0 0 1 1 1 1 1 1 1 ... #>  $ reg663  : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ reg664  : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ reg665  : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ reg666  : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ reg667  : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ reg668  : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ reg669  : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ south66 : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ black   : int  1 0 0 0 0 0 0 0 0 0 ... #>  $ smsa    : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ south   : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ smsa66  : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ wage    : int  548 481 721 250 729 500 565 608 425 515 ... #>  $ enroll  : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ KWW     : int  15 35 42 25 34 38 41 46 32 34 ... #>  $ IQ      : int  NA 93 103 88 108 85 119 108 96 97 ... #>  $ married : int  1 1 1 1 1 1 1 1 4 1 ... #>  $ libcrd14: int  0 1 1 1 0 1 1 1 0 1 ... #>  $ exper   : int  16 9 16 10 16 8 9 9 10 11 ... #>  $ lwage   : num  6.31 6.18 6.58 5.52 6.59 ... #>  $ expersq : int  256 81 256 100 256 64 81 81 100 121 ... #>  - attr(*, \"time.stamp\")= chr \"25 Jun 2011 23:03\""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/dataequalizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Equalize dataframes — dataequalizer","title":"Equalize dataframes — dataequalizer","text":"dataequalizer compares two data frames looks data frames contain columns Name. copy source_df returned, containing columns named identical target_df source_df data frames. function mainly used functions package.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/dataequalizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equalize dataframes — dataequalizer","text":"","code":"dataequalizer(target_df, source_df, variables = NULL, silence = FALSE)"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/dataequalizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equalize dataframes — dataequalizer","text":"target_df data frame source_df data frame containing column-names named equally target_df variables vector indicate variable names copy source_df also target_df. silence logic value. FALSE, warnings returned indicating, variables removed, survey.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/dataequalizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equalize dataframes — dataequalizer","text":"Returns copy source_df containing variables names contained also target_df data frame.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/dataequalizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equalize dataframes — dataequalizer","text":"","code":"## Get Data to equalize  data(\"card\")  ##reduce data frame card2<-card[c(\"id\",\"age\",\"educ\",\"fatheduc\",\"motheduc\",\"IQ\",\"wage\")]  card_equalized<-sampcompR::dataequalizer(card2,card,variables=c(\"age\",\"educ\",\"IQ\",\"wage\")) #> Warning: Only chosen variables included in both datasets are used  #>    Missing variables are: id | nearc2 | nearc4 | fatheduc | motheduc | weight | momdad14 | sinmom14 | step14 | reg661 | reg662 | reg663 | reg664 | reg665 | reg666 | reg667 | reg668 | reg669 | south66 | black | smsa | south | smsa66 | enroll | KWW | married | libcrd14 | exper | lwage | expersq card_equalized[1:20,] #>    age educ  IQ wage #> 1   29    7  NA  548 #> 2   27   12  93  481 #> 3   34   12 103  721 #> 4   27   11  88  250 #> 5   34   12 108  729 #> 6   26   12  85  500 #> 7   33   18 119  565 #> 8   29   14 108  608 #> 9   28   12  96  425 #> 10  29   12  97  515 #> 11  28    9  84  225 #> 12  26   12  89  400 #> 13  24   11  93  417 #> 14  30   11  74  217 #> 15  31   16 116  894 #> 16  24   14  NA  300 #> 17  34   12  93  346 #> 18  29   14 100  658 #> 19  26   10  91  575 #> 20  32   12  88  649"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/descriptive_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a Descriptive Table for Every Data Frame — descriptive_table","title":"Get a Descriptive Table for Every Data Frame — descriptive_table","text":"Get Descriptive Table every Data Frame, easy document Data","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/descriptive_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a Descriptive Table for Every Data Frame — descriptive_table","text":"","code":"descriptive_table(   dfs,   variables,   varlabels = NULL,   weight = NULL,   strata = NULL,   id = NULL,   value = \"mean\",   digits = 3 )"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/descriptive_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a Descriptive Table for Every Data Frame — descriptive_table","text":"dfs character vector, containing names data frames. variables character vector containing variables data frame described. varlabels character vector containing Labels every variable variables. weight character vector, containing either name weight respective data frame, NA, weighting performed data frame. strata character vector, containing either name strata respective data frame, NA, strata  used weighting data frame. id character vector, containing either name id respective data frame, NA, every row unique data frame. value character vector indicating descriptive value displayed data frame. can either \"mean\", \"percent\", \"total\", \"total_percent\". digits numeric value indicating number digits Descriptive table rounded .","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/descriptive_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a Descriptive Table for Every Data Frame — descriptive_table","text":"Returns matrix Descriptive information. Output depends value.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/heatmap_biv_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Difference or Relative Difference in Pearson's r for Multiple Data Frames — heatmap_biv_compare","title":"Plot Difference or Relative Difference in Pearson's r for Multiple Data Frames — heatmap_biv_compare","text":"Plot object generated biv_compare function heatmap.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/heatmap_biv_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Difference or Relative Difference in Pearson's r for Multiple Data Frames — heatmap_biv_compare","text":"","code":"heatmap_biv_compare(   biv_data_object,   value = \"AAB\",   summet_transparance = 0,   summetric = TRUE,   summet_size = 4.5,   ndigits_summet = 3,   upper_limit = NULL,   lower_limit = NULL,   corr_size = 3,   ndigits_number = 2,   varlabels = NULL,   plots_label = NULL,   grid = \"white\",   colors = c(\"#8ECCEE\", \"#1F45F9\"),   number_color = \"white\",   ncol_facet = 3,   legend_title = NULL,   interest_breaks = NULL,   interest_labels = NULL,   plot_title = NULL )"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/heatmap_biv_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Difference or Relative Difference in Pearson's r for Multiple Data Frames — heatmap_biv_compare","text":"biv_data_object object generated biv_compare function. value character string either \"AAB\"  \"AARB\". AAB means Absolute Difference Pearson's r estimates dfs benchmarks displayed tiles number color. AARB means Absolute Relative Difference displayed instead. summet_transparance number determine transparency displayed summetric. summetric TRUE Average Absolute Difference (AAB) Average Absolute Relative Difference (AARB) Pearson's r values dfs benchmarks displayed plot. summet_size number determine size displayed summetric plot. ndigits_summet maximum number digits numbers displayed summertic plot. upper_limit, lower_limit numeric value, indicating highest lowest value displayed tiles number color. affect summetric. However, can used keep differences values visible heatmap, even presence strong ouliers. corr_size font size correlation numbers displayed tiles heatmap. ndigits_number maximum digits numbers displyed tiles heatmap. varlabels character string vector character strings containing new labels variables used plot. plots_label character string vector character strings containing new labels data frames used plot. grid character string, determines color lines tiles heatmap. colors vector two colors used heatmap. number_color character string indicating color numbers, displayed tiles. ncol_facet Number columns used faced_wrap() plots. legend_title character string indicating title legend plot. interest_breaks numeric vector indicating breaks color scheme displayed legend heatmap. interest_labels character vector indicating labels breaks displayed legend heatmap. plot_title character string containing title plot.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/heatmap_biv_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Difference or Relative Difference in Pearson's r for Multiple Data Frames — heatmap_biv_compare","text":"object generated help ggplot2::ggplot2(), used visualize heatmap bivariate differences data frames benchmarks.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/heatmap_biv_compare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Difference or Relative Difference in Pearson's r for Multiple Data Frames — heatmap_biv_compare","text":"plot shows heatmap correlation matrix, colors determined Absolue Difference Absolute Relative Difference Pearson's r estimates data frames benchmarks.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/heatmap_biv_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Difference or Relative Difference in Pearson's r for Multiple Data Frames — heatmap_biv_compare","text":"","code":"## Get Data for comparison  data(\"card\")  north <- card[card$south==0,] white <- card[card$black==0,]  ## use the function to plot the data  bivar_data<-sampcompR::biv_compare(dfs = c(\"north\",\"white\"),                                    benchmarks = c(\"card\",\"card\"),                                    variables= c(\"age\",\"educ\",\"fatheduc\",\"motheduc\",\"wage\",\"IQ\"),                                    data=TRUE) #> Error in get(dfs[i]): object 'north' not found  Absolute_Bias_Plot<-sampcompR::heatmap_biv_compare(bivar_data,value = \"AAB\") #> Error: object 'bivar_data' not found Absolute_Bias_Plot #> Error: object 'Absolute_Bias_Plot' not found  Absolute_Relative_Bias_Plot<-sampcompR::heatmap_biv_compare(bivar_data,value = \"AARB\") #> Error: object 'bivar_data' not found Absolute_Relative_Bias_Plot #> Error: object 'Absolute_Relative_Bias_Plot' not found"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/missing_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a Table indicating the number and proportion of NA values for a selected set of variables. — missing_table","title":"Returns a Table indicating the number and proportion of NA values for a selected set of variables. — missing_table","text":"Returns Table indicating number proportion NA values selected set variables.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/missing_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a Table indicating the number and proportion of NA values for a selected set of variables. — missing_table","text":"","code":"missing_table(dfs, variables, df_names = NULL, varlabels = NULL)"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/missing_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a Table indicating the number and proportion of NA values for a selected set of variables. — missing_table","text":"dfs character vector names data frames missings per variable displayed. variables character vector variable names missings displyed. df_names Either Null character vector names, relabel data frames table . varlabels Either Null, character vector variable names, relabel variables table .","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/missing_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a Table indicating the number and proportion of NA values for a selected set of variables. — missing_table","text":"Returns Table indicating number proportion NA values selected set variables. can used get overview data, detect errors data rangeling, find items survey, especially, high item nonresponse.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/missing_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a Table indicating the number and proportion of NA values for a selected set of variables. — missing_table","text":"","code":"## Get Data for comparison  data(\"card\")  north <- card[card$south==0,] white <- card[card$black==0,]  variables<- c(\"age\",\"educ\",\"fatheduc\",\"motheduc\",\"wage\",\"IQ\") varlabels<-c(\"Age\",\"Education\",\"Father's Education\",              \"Mother's Education\",\"Wage\",\"IQ\")  missing_tab<-sampcompR::missing_table(dfs = c(\"north\",\"white\"),                                       variables=variables,                                       df_names = c(\"North\",\"White\"),                                       varlabels=varlabels) #> Error in purrr::map(dfs, get): ℹ In index: 1. #> Caused by error in `.f()`: #> ! object 'north' not found  missing_tab #> Error: object 'missing_tab' not found"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compares data frames using different regression methods. — multi_compare","title":"Compares data frames using different regression methods. — multi_compare","text":"multi_compare compares data frames using regression models based differing methods. glm Models can compared.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compares data frames using different regression methods. — multi_compare","text":"","code":"multi_compare(   df,   benchmark,   independent = NULL,   dependent = NULL,   formula_list = NULL,   family = \"ols\",   rm_na = \"pairwise\",   out_output_list = TRUE,   out_df = FALSE,   out_models = FALSE,   print_p = FALSE,   print_se = FALSE,   weight = NULL,   id = NULL,   strata = NULL,   nest = FALSE,   weight_bench = NULL,   id_bench = NULL,   strata_bench = NULL,   nest_bench = FALSE,   robust_se = FALSE,   p_adjust = NULL,   names_df_benchmark = NULL,   silence_summary = FALSE,   nboots = 0,   boot_all = FALSE,   parallel = FALSE,   adjustment_vars = NULL,   raking_targets = NULL,   post_targets = NULL,   percentile_ci = TRUE )"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compares data frames using different regression methods. — multi_compare","text":"df, benchmark data frame containing set respondents benchmark set respondents compare, character string containing name set respondents benchmark set respondents. independent dependent variables must inside data frames. independent list strings containing independent variables (x) comparison. Every independent variable used every model estimate dependent variable (y). formula_list provided, independent ignored. dependent list strings containing dependent variables (y) comparison. One model computed every dependent variable (y) provided. formula_list provided, dependent ignored. formula_list list formulas use regression models. given, dependent independent parameters ignored. family family input, can given glm svyglm. Additionally, \"ols\" given, gaussian(link = \"identity\"), \"logit\" given, binomial(link = \"logit\") used. rm_na character determine handle missing values.  two options  supported. rm_na = \"pairwise\" NAs removed separately every model. cases containing NA one variables used respective model removed (independent variables respective dependent variable). rm_na = \"listwise\" cases containing NA one dependent independent variables removed. out_output_list logical value. out_output_list = TRUE, list returned, containing separate interaction models calculated glm function svyglm case weighting, well summary object every model. Standard errors p-values models always calculated without robustness methods. out_df TRUE, used data frames also part output list. out_models True, GLM model objects part returned object. print_p TRUE, addition difference Average Discrete Change (ADC), p-values printed. print_se TRUE, additionally standard errors printed. weight, weight_bench character vector containing name weight variable respective data frame. provided data frame weighted using svydesign function. Also id must provided. id, id_bench character vector containing name id variable respectiv data frame. needed weighting. strata, strata_bench character vector containing name strata variable respective data frame. used svydesign function weighting. nest, nest_bench logical vector used svydesign function respective data frame. robust_se logical value TRUE instead normal standard errors, heteroscedasticity-consistent standard errors used analysis calculate vcovHC coeftest packages used. p_adjust logical input character string indicating adjustment method usable method parameter p.adjust. set TRUE Bonferroni adjusted p-values used inference. names_df_benchmark vector containing first name df benchmark. silence_summary logical value, indicate printed summary printed instead. nboots numeric value indicating number bootstrap replications. nboots = 0 bootstrapping performed. Else nboots must >2. Note, bootstrapping can computationaly heavy can therefore take . boot_all TURE, , dfs benchmarks bootstrapped. Otherwise benchmark estimate assumed constant. parallel TRUE, detected cores used bootstrapping. adjustment_vars Variables used adjust survey using raking post-stratification. raking_targets List raking targets can given rake function rake, rake df. post_targets List post_stratification targets can given rake function postStratify, post_stratificatify df. percentile_ci TURE, cofidence intervals calculated using percentile method. False, calculated using normal method.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compares data frames using different regression methods. — multi_compare","text":"table printed showing difference set respondents model, well indicator, differ significantly . generated using chosen method. Ifout_output_list = TRUE, also list additional information returned can used additional packages function reprint summary visualize results.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compares data frames using different regression methods. — multi_compare","text":"","code":"#Example 1 ## Make a comparison specifiying dependent and independent variables.  ## Get Data for comparison  data(\"card\")  north <- card[card$south==0,]   ## use the function to plot the data  multi_data1<-sampcompR::multi_compare(df = north,                                       bench = card,                                      independent = c(\"age\",\"fatheduc\",\"motheduc\",\"IQ\"),                                      dependent = c(\"educ\",\"wage\"),                                      family=\"ols\")  #>  #> Difference in coeficients between sets of respondents  #>   #>          educ         wage         #> age      -2.43e-02    -8.55e-01    #> fatheduc -2.37e-02    -2.93e-01    #> motheduc 1.23e-02     2.35e+00     #> IQ       -7.25e-03    4.80e-01     #>  #> Overall difference between north & card: 0% of coeficients are significant different #> (*p<0.05 ; **p<0.005 ; ***p<0.001;  for t-test robust standard errors are used)  #>                            plot_multi_compare(\"multi_data1\") #> Error in get(multi_compare_objects[i]): object 'multi_data1' not found  #Example 2 ## Make a comparison with a formula_list data(\"card\")  north <- card[card$south==0,]  form_list<-list(formula(educ~age+fatheduc+motheduc+IQ),                 formula(wage~age+fatheduc+motheduc+IQ))   multi_data2 <- sampcompR::multi_compare(df = north,                                          bench = card,                                         formula_list = form_list,                                         family=\"ols\") #>  #> Difference in coeficients between sets of respondents  #>   #>          educ         wage         #> age      -2.43e-02    -8.55e-01    #> fatheduc -2.37e-02    -2.93e-01    #> motheduc 1.23e-02     2.35e+00     #> IQ       -7.25e-03    4.80e-01     #>  #> Overall difference between north & card: 0% of coeficients are significant different #> (*p<0.05 ; **p<0.005 ; ***p<0.001;  for t-test robust standard errors are used)  #>     plot_multi_compare(\"multi_data2\") #> Error in get(multi_compare_objects[i]): object 'multi_data2' not found"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_compare_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multi_compare_objects — multi_compare_merge","title":"Combine multi_compare_objects — multi_compare_merge","text":"multi_compare_merge combines two multi_compare_objects plot together.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_compare_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multi_compare_objects — multi_compare_merge","text":"","code":"multi_compare_merge(multi_reg_object1, multi_reg_object2, p_adjust = FALSE)"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_compare_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multi_compare_objects — multi_compare_merge","text":"multi_reg_object1, multi_reg_object2 Multireg objects combined. p_adjust logical input character string indicating adjustment method isusable method parameter p.adjust. set TRUE Bonferroni adjusted p-values used inference.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_compare_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multi_compare_objects — multi_compare_merge","text":"combined multi_reg_object can used plot functions create visualization.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_compare_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine multi_compare_objects — multi_compare_merge","text":"","code":"## Get Data for comparison data(\"card\")  north <- card[card$south==0,] white <- card[card$black==0,]  ## use the function to plot the data multi_data1 <- sampcompR::multi_compare(df = north,                                          bench = card,                                         independent = c(\"age\",\"fatheduc\",\"motheduc\",\"IQ\"),                                         dependent = c(\"educ\"),                                         family = \"ols\")  #>  #> Difference in coeficients between sets of respondents  #>   #>          educ         #> age      -2.43e-02    #> fatheduc -2.37e-02    #> motheduc 1.23e-02     #> IQ       -7.25e-03    #>  #> Overall difference between north & card: 0% of coeficients are significant different #> (*p<0.05 ; **p<0.005 ; ***p<0.001;  for t-test robust standard errors are used)  #>                                         multi_data2 <- sampcompR::multi_compare(df = white,                                          bench = card,                                         independent = c(\"age\",\"fatheduc\",\"motheduc\",\"IQ\"),                                         dependent = c(\"wage\"),                                         family = \"ols\")  #>  #> Difference in coeficients between sets of respondents  #>   #>          wage         #> age      -9.51e-01    #> fatheduc 1.28e-01     #> motheduc 2.03e-01     #> IQ       3.61e-01     #>  #> Overall difference between white & card: 0% of coeficients are significant different #> (*p<0.05 ; **p<0.005 ; ***p<0.001;  for t-test robust standard errors are used)  #>    ### merge two objects ###                                         merged_object<-multi_compare_merge(multi_data1,multi_data2)    ### Plot the merged object ###  plot_multi_compare(\"merged_object\")                                        #> Error in get(multi_compare_objects[i]): object 'merged_object' not found"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_compare_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Output-Table of a multi_compare_object — multi_compare_table","title":"Create an Output-Table of a multi_compare_object — multi_compare_table","text":"Returns table based information multi_compare_object can outputted HTML LaTex Table, example help stargazer function.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_compare_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Output-Table of a multi_compare_object — multi_compare_table","text":"","code":"multi_compare_table(   multi_compare_objects,   type = \"diff\",   names = NULL,   ndigits = 3,   envir = parent.frame() )"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_compare_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Output-Table of a multi_compare_object — multi_compare_table","text":"multi_compare_objects One object returned multi_compare. type character string, determine type regression table. \"dfs\" regression table based data frame(s) returned. \"benchmarks\" regression table based benchmark(s) returned. \"diff\" table indicating difference df(s) benchmark(s) returned. names character vector rename data frames comparison. ndigits Number digits shown table. envir environment, multi_core_objects can found.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_compare_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Output-Table of a multi_compare_object — multi_compare_table","text":"table containing information multivariate comparison based multi_compare function.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_compare_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Output-Table of a multi_compare_object — multi_compare_table","text":"","code":"## Get Data for comparison  data(\"card\")  north <- card[card$south==0,] white <- card[card$black==0,]  ## use the function to plot the data multi_data1 <- sampcompR::multi_compare(df = north,                                           bench = card,                                          independent = c(\"age\",\"fatheduc\",\"motheduc\",\"IQ\"),                                          dependent = c(\"educ\",\"wage\"),                                          family = \"ols\")  #>  #> Difference in coeficients between sets of respondents  #>   #>          educ         wage         #> age      -2.43e-02    -8.55e-01    #> fatheduc -2.37e-02    -2.93e-01    #> motheduc 1.23e-02     2.35e+00     #> IQ       -7.25e-03    4.80e-01     #>  #> Overall difference between north & card: 0% of coeficients are significant different #> (*p<0.05 ; **p<0.005 ; ***p<0.001;  for t-test robust standard errors are used)  #>                                         multi_data2 <- sampcompR::multi_compare(df = white,                                           bench = card,                                          independent = c(\"age\",\"fatheduc\",\"motheduc\",\"IQ\"),                                          dependent = c(\"educ\",\"wage\"),                                          family = \"ols\")  #>  #> Difference in coeficients between sets of respondents  #>   #>          educ         wage         #> age      -1.20e-02    -9.51e-01    #> fatheduc -1.45e-02    1.28e-01     #> motheduc 9.99e-03     2.03e-01     #> IQ       -9.28e-03    3.61e-01     #>  #> Overall difference between white & card: 0% of coeficients are significant different #> (*p<0.05 ; **p<0.005 ; ***p<0.001;  for t-test robust standard errors are used)  #>                                         table<-multi_compare_table(c(\"multi_data1\",\"multi_data2\"),type=\"diff\")  noquote(table) #>       data_frames variables educ       wage       #>  [1,] north       age       -0.024     -0.855     #>  [2,]                       (0.025)    (3.257)    #>  [3,]             fatheduc  -0.024     -0.293     #>  [4,]                       (0.028)    (3.682)    #>  [5,]             motheduc    0.012      2.350    #>  [6,]                       (0.033)    (4.379)    #>  [7,]             IQ        -0.007       0.480    #>  [8,]                       (0.005)    (0.691)    #>  [9,] white       age       -0.012     -0.951     #> [10,]                       (0.023)    (3.02)     #> [11,]             fatheduc  -0.014       0.128    #> [12,]                       (0.025)    (3.287)    #> [13,]             motheduc    0.010      0.203    #> [14,]                       (0.029)    (3.915)    #> [15,]             IQ        -0.009       0.361    #> [16,]                       (0.005)    (0.652)"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_per_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a table based on the information of a multi_compare_object that indicates the proportion of biased variables. It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — multi_per_variable","title":"Returns a table based on the information of a multi_compare_object that indicates the proportion of biased variables. It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — multi_per_variable","text":"Returns table based information multi_compare_object indicates proportion biased variables. can outputted HTML LaTex Table, example help stargazer function.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_per_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a table based on the information of a multi_compare_object that indicates the proportion of biased variables. It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — multi_per_variable","text":"","code":"multi_per_variable(   multi_compare_objects,   type = \"coefs\",   label_df = NULL,   lables_coefs = NULL,   lables_models = NULL,   ndigits = 1 )"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_per_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a table based on the information of a multi_compare_object that indicates the proportion of biased variables. It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — multi_per_variable","text":"multi_compare_objects object returned multi_compare function. Object can either inserted single object character string containing names multiple objects. type type table, can either \"coefs\", \"models\", \"complete\". coefs chosen, average bias coefficients outputted, models chosen, average bias models outputted, complete chosen, outputted. label_df character vector containing labels data frames. lables_coefs character vector containing labels coefficients. lables_models character vector containing labels models. ndigits Number digits shown table.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_per_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a table based on the information of a multi_compare_object that indicates the proportion of biased variables. It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — multi_per_variable","text":"matrix, indicates proportion bias every individual coefficient model multivariate comparisons. given separately every comparison, well averaged comparisons.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/multi_per_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a table based on the information of a multi_compare_object that indicates the proportion of biased variables. It can be outputted as HTML or LaTex Table, for example with the help of the stargazer function. — multi_per_variable","text":"","code":"data(\"card\")  north <- card[card$south==0,] white <- card[card$black==0,]  ## use the function to plot the data multi_data1 <- sampcompR::multi_compare(df = north,                                          bench = card,                                         independent = c(\"age\",\"fatheduc\",\"motheduc\",\"IQ\"),                                         dependent = c(\"educ\",\"wage\"),                                         family = \"ols\")  #>  #> Difference in coeficients between sets of respondents  #>   #>          educ         wage         #> age      -2.43e-02    -8.55e-01    #> fatheduc -2.37e-02    -2.93e-01    #> motheduc 1.23e-02     2.35e+00     #> IQ       -7.25e-03    4.80e-01     #>  #> Overall difference between north & card: 0% of coeficients are significant different #> (*p<0.05 ; **p<0.005 ; ***p<0.001;  for t-test robust standard errors are used)  #>    multi_data2 <- sampcompR::multi_compare(df = white,                                          bench = card,                                         independent = c(\"age\",\"fatheduc\",\"motheduc\",\"IQ\"),                                         dependent = c(\"educ\",\"wage\"),                                         family = \"ols\")  #>  #> Difference in coeficients between sets of respondents  #>   #>          educ         wage         #> age      -1.20e-02    -9.51e-01    #> fatheduc -1.45e-02    1.28e-01     #> motheduc 9.99e-03     2.03e-01     #> IQ       -9.28e-03    3.61e-01     #>  #> Overall difference between white & card: 0% of coeficients are significant different #> (*p<0.05 ; **p<0.005 ; ***p<0.001;  for t-test robust standard errors are used)  #>    table<-sampcompR::multi_per_variable(multi_compare_objects = c(\"multi_data1\",\"multi_data2\")) #> Error in purrr::map(multi_compare_objects, ~multi_same_func(multi_compare_object = .x,     p_adjust = p_adjust)): ℹ In index: 1. #> Caused by error in `get()`: #> ! object 'multi_data1' not found noquote(table) #> function (..., exclude = if (useNA == \"no\") c(NA, NaN), useNA = c(\"no\",  #>     \"ifany\", \"always\"), dnn = list.names(...), deparse.level = 1)  #> { #>     list.names <- function(...) { #>         l <- as.list(substitute(list(...)))[-1L] #>         if (length(l) == 1L && is.list(..1) && !is.null(nm <- names(..1)))  #>             return(nm) #>         nm <- names(l) #>         fixup <- if (is.null(nm))  #>             seq_along(l) #>         else nm == \"\" #>         dep <- vapply(l[fixup], function(x) switch(deparse.level +  #>             1, \"\", if (is.symbol(x)) as.character(x) else \"\",  #>             deparse(x, nlines = 1)[1L]), \"\") #>         if (is.null(nm))  #>             dep #>         else { #>             nm[fixup] <- dep #>             nm #>         } #>     } #>     miss.use <- missing(useNA) #>     miss.exc <- missing(exclude) #>     useNA <- if (miss.use && !miss.exc && !match(NA, exclude,  #>         nomatch = 0L))  #>         \"ifany\" #>     else match.arg(useNA) #>     doNA <- useNA != \"no\" #>     if (!miss.use && !miss.exc && doNA && match(NA, exclude,  #>         nomatch = 0L))  #>         warning(\"'exclude' containing NA and 'useNA' != \\\"no\\\"' are a bit contradicting\") #>     args <- list(...) #>     if (length(args) == 1L && is.list(args[[1L]])) { #>         args <- args[[1L]] #>         if (length(dnn) != length(args))  #>             dnn <- paste(dnn[1L], seq_along(args), sep = \".\") #>     } #>     if (!length(args))  #>         stop(\"nothing to tabulate\") #>     bin <- 0L #>     lens <- NULL #>     dims <- integer() #>     pd <- 1L #>     dn <- NULL #>     for (a in args) { #>         if (is.null(lens))  #>             lens <- length(a) #>         else if (length(a) != lens)  #>             stop(\"all arguments must have the same length\") #>         fact.a <- is.factor(a) #>         if (doNA)  #>             aNA <- anyNA(a) #>         if (!fact.a) { #>             a0 <- a #>             op <- options(warn = 2) #>             on.exit(options(op)) #>             a <- factor(a, exclude = exclude) #>             options(op) #>         } #>         add.na <- doNA #>         if (add.na) { #>             ifany <- (useNA == \"ifany\") #>             anNAc <- anyNA(a) #>             add.na <- if (!ifany || anNAc) { #>                 ll <- levels(a) #>                 if (add.ll <- !anyNA(ll)) { #>                   ll <- c(ll, NA) #>                   TRUE #>                 } #>                 else if (!ifany && !anNAc)  #>                   FALSE #>                 else TRUE #>             } #>             else FALSE #>         } #>         if (add.na)  #>             a <- factor(a, levels = ll, exclude = NULL) #>         else ll <- levels(a) #>         a <- as.integer(a) #>         if (fact.a && !miss.exc) { #>             ll <- ll[keep <- which(match(ll, exclude, nomatch = 0L) ==  #>                 0L)] #>             a <- match(a, keep) #>         } #>         else if (!fact.a && add.na) { #>             if (ifany && !aNA && add.ll) { #>                 ll <- ll[!is.na(ll)] #>                 is.na(a) <- match(a0, c(exclude, NA), nomatch = 0L) >  #>                   0L #>             } #>             else { #>                 is.na(a) <- match(a0, exclude, nomatch = 0L) >  #>                   0L #>             } #>         } #>         nl <- length(ll) #>         dims <- c(dims, nl) #>         if (prod(dims) > .Machine$integer.max)  #>             stop(\"attempt to make a table with >= 2^31 elements\") #>         dn <- c(dn, list(ll)) #>         bin <- bin + pd * (a - 1L) #>         pd <- pd * nl #>     } #>     names(dn) <- dnn #>     bin <- bin[!is.na(bin)] #>     if (length(bin))  #>         bin <- bin + 1L #>     y <- array(tabulate(bin, pd), dims, dimnames = dn) #>     class(y) <- \"table\" #>     y #> } #> <bytecode: 0x563b2db98ea8> #> <environment: namespace:base>"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/plot_biv_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Comparison of Multiple Data Frames on a Bivariate Level — plot_biv_compare","title":"Plot Comparison of Multiple Data Frames on a Bivariate Level — plot_biv_compare","text":"Plot object generated biv_compare function.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/plot_biv_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Comparison of Multiple Data Frames on a Bivariate Level — plot_biv_compare","text":"","code":"plot_biv_compare(   biv_data_object,   plot_title = NULL,   plots_label = NULL,   p_value = NULL,   varlabels = NULL,   mar = c(0, 0, 0, 0),   note = FALSE,   grid = \"white\",   diff_perc = TRUE,   diff_perc_size = 4.5,   perc_diff_transparance = 0,   gradient = FALSE,   sum_weights = NULL,   missings_x = TRUE,   order = NULL,   breaks = NULL,   colors = NULL,   ncol_facet = 3 )"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/plot_biv_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Comparison of Multiple Data Frames on a Bivariate Level — plot_biv_compare","text":"biv_data_object object generated biv_compare function. plot_title character string containing title plot. plots_label character string vector character strings containing new labels data frames used plot. p_value number 0 one determine maximum significance niveau. varlabels character string vector character strings containing new labels variables used plot. mar vector determines margins plot. note note = TRUE, note displayed describe plot. grid character string, determines color lines tiles heatmap. diff_perc TRUE percental measure difference dfs benchmarks displayed plot. diff_perc_size number determine size displayed percental difference surveys plot. perc_diff_transparance number determine transparency displayed percental-difference surveys plot. gradient gradient = TRUE, colors heatmap less transparent, depending difference Pearson's r data frames comparison. sum_weights vector containing information every variable weigh displayed percental difference calculation. can used variables - underrepresented analysis. missings_x TRUE, missing pairs plot marked X. order character vector determine order variables displayed plot. breaks vector label color scheme legend. colors vector determine colors plot. ncol_facet Number columns used faced_wrap() plots.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/plot_biv_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Comparison of Multiple Data Frames on a Bivariate Level — plot_biv_compare","text":"object generated help ggplot2::ggplot2(), used visualize differences data frames benchmarks.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/plot_biv_compare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Comparison of Multiple Data Frames on a Bivariate Level — plot_biv_compare","text":"plot shows heatmap correlation matrix, colors determined similarity Pearson's r value sets respondents. Leaving default breaks colors, (green) indicates, Pearson's r correlation significant > 0 related data frame benchmark Pearson's r correlations significant different, data frame benchmark. Small Diff (yellow) indicates Pearson's r correlation significant > 0 related data frame benchmark Pearson's r correlations significant different, data frame benchmark. Large Diff (red) indicates, coditions yellow fulfilled, correlations either opposite directions,one double size .","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/plot_biv_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Comparison of Multiple Data Frames on a Bivariate Level — plot_biv_compare","text":"","code":"## Get Data for comparison  data(\"card\")  north <- card[card$south==0,] white <- card[card$black==0,]  ## use the function to plot the data  bivar_data<-sampcompR::biv_compare(dfs = c(\"north\",\"white\"),                                    benchmarks = c(\"card\",\"card\"),                                    variables= c(\"age\",\"educ\",\"fatheduc\",\"motheduc\",\"wage\",\"IQ\"),                                    data=TRUE) #> Error in get(dfs[i]): object 'north' not found                          sampcompR::plot_biv_compare(bivar_data) #> Error: object 'bivar_data' not found"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/plot_multi_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Multiple multi_compare_objects — plot_multi_compare","title":"Plot Multiple multi_compare_objects — plot_multi_compare","text":"plot_multi_compare plots multipe multi_compare_objects together.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/plot_multi_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Multiple multi_compare_objects — plot_multi_compare","text":"","code":"plot_multi_compare(   multi_compare_objects,   plots_label = NULL,   plot_title = NULL,   p_value = 0.05,   breaks = NULL,   plot_data = FALSE,   colors = NULL,   variant = \"one\",   p_adjust = NULL,   note = FALSE,   grid = \"white\",   diff_perc = TRUE,   diff_perc_size = 4.5,   ncol_facet = 3,   perc_diff_transparance = 0,   diff_perc_position = \"top_right\",   gradient = FALSE,   sum_weights_indep = NULL,   sum_weights_dep = NULL,   label_x = NULL,   label_y = NULL,   missings_x = TRUE )"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/plot_multi_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Multiple multi_compare_objects — plot_multi_compare","text":"multi_compare_objects character vector containing names one multi_compare_objects. Every object displayed separately facet_wrap ggplot. plots_label character vector lengths multi_compare_objects, name different objects facet_wrap ggplot. plot_title string containing title visualization. p_value number zero one, used p-value significance analyses. breaks vector, containing several strings, rename categories legend. possible length depends variant. plot_data logical value. TRUE, instead plot data frame returned, used plot. colors vector colors, usable ggplot, every break. possible length depends variant. variant Variant can either \"one\", \"two\", \"three\",\"four\",\"five\", \"six\". variant = \"one\" plot show whether coefficients regression models significantly different (Diff). , also show differ strength (one twice size ) direction well (Large Diff). variant = \"two\" plot show whether coefficients regression models differ significantly (Large Diff). show whether still differ direction (Diff Direction) whether one significant (Diff Significance). variant = \"three\" plot show whether coefficients regression models differ various aspects. Whether one significant, (Diff Significance), whether differ direction (Diff Direction) whether one double size (Diff Strength). variables meet criteria multiple categories classified latest fitting category. variant = \"four\" plot show coefficient df significant, coefficient significant benchmark way around  (Diff Significance). variant = \"five\" plot show coefficient df positive, coefficient benchmark negative way around  (Diff Direction). variant = \"six\" plot show coefficient df double size coefficient benchmark way around  (Diff Strength). p_adjust TRUE results based adjusted p-values used. Adjustment methods depend method used generate multi_compare_objects. note logical value. TRUE, note displayed plot describing variant. grid string, can either \"none\" color, edges every tile. \"none\", grid displayed. diff_perc logical value. TRUE, percent differing categories, decided variant, displayed corner plot. diff_perc_size number decide size text diff_perc. ncol_facet number columns used faced_wrap() plots. perc_diff_transparance number zero one, decide background transparency diff_perc. diff_perc_position character string, choose position diff_perc Can either \"top_right\"(default), \"bottom_right\", \"bottom_left\", \"top_left\". gradient logical Value. TRUE, transparency tiles depends coefficient. sum_weights_indep, sum_weights_dep vector weights every dependent independent variable. Must NULL, length dependent variables independent variables. label_x, label_y character string vector character strings containing label x-axis y-axis. missings_x TRUE, missing pairs plot marked X.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/plot_multi_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Multiple multi_compare_objects — plot_multi_compare","text":"Returns heat matrix-like plot created ggplot, visualize multivariate differences. multiple objects used, displayed separately ggplot's facet_wrap function. y-axis, independent variables displayed, x-axis independent variables displayed. Depending variant, displayed tile colors must interpreted differently. FALSEor information interpretation look variant.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/plot_multi_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Multiple multi_compare_objects — plot_multi_compare","text":"","code":"## Get Data for comparison  data(\"card\")  north <- card[card$south==0,] white <- card[card$black==0,]  ## use the function to plot the data multi_data1 <- sampcompR::multi_compare(df = north,                                          bench = card,                                         independent = c(\"age\",\"fatheduc\",\"motheduc\",\"IQ\"),                                         dependent = c(\"educ\",\"wage\"),                                         family = \"ols\")  #>  #> Difference in coeficients between sets of respondents  #>   #>          educ         wage         #> age      -2.43e-02    -8.55e-01    #> fatheduc -2.37e-02    -2.93e-01    #> motheduc 1.23e-02     2.35e+00     #> IQ       -7.25e-03    4.80e-01     #>  #> Overall difference between north & card: 0% of coeficients are significant different #> (*p<0.05 ; **p<0.005 ; ***p<0.001;  for t-test robust standard errors are used)  #>                                         multi_data2 <- sampcompR::multi_compare(df = white,                                          bench = card,                                         independent = c(\"age\",\"fatheduc\",\"motheduc\",\"IQ\"),                                         dependent = c(\"educ\",\"wage\"),                                         family = \"ols\")  #>  #> Difference in coeficients between sets of respondents  #>   #>          educ         wage         #> age      -1.20e-02    -9.51e-01    #> fatheduc -1.45e-02    1.28e-01     #> motheduc 9.99e-03     2.03e-01     #> IQ       -9.28e-03    3.61e-01     #>  #> Overall difference between white & card: 0% of coeficients are significant different #> (*p<0.05 ; **p<0.005 ; ***p<0.001;  for t-test robust standard errors are used)  #>                                         plot_multi_compare(c(\"multi_data1\",\"multi_data2\")) #> Error in get(multi_compare_objects[i]): object 'multi_data1' not found"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/plot_uni_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"plot univar data — plot_uni_compare","title":"plot univar data — plot_uni_compare","text":"plot_uni_compare uses ggplot2 generate plot based object generated uni_compare function.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/plot_uni_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot univar data — plot_uni_compare","text":"","code":"plot_uni_compare(   uni_compare_objects,   name_dfs = NULL,   name_benchmarks = NULL,   summetric = NULL,   colors = NULL,   shapes = NULL,   legendlabels = NULL,   legendtitle = NULL,   label_x = NULL,   label_y = NULL,   summet_size = NULL,   point_size = NULL,   errorbar_size = NULL,   plot_title = NULL,   conf_adjustment = FALSE,   varlabels = NULL,   ndigits = 3 )"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/plot_uni_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot univar data — plot_uni_compare","text":"uni_compare_objects object generated uni_compare function. name_dfs, name_benchmarks character string vector character strings containing new names data frames benchmarks, used plot. summetric \"avg1\",\"avg2\", \"mse1\",\"mse2\", \"rmse1\",\"rmse2\", \"R\" respective measure calculated biases survey. values \"avg1\", \"mse1\" \"rmse1\" lead similar results \"avg2\", \"mse2\" \"rmse2\", slightly different visualization plot. summetric = \"none\", summetric displayed plot, summetric = NULL summetric specified uni_compare_object used. colors vector colors used plot different comparisons. color specified separately every comparison, one value vector. shapes vector shapes applicable ggplot2::ggplot2() used plot different comparisons. shapes specified separately every comparison, one value vector. legendlabels character string vector strings containing label legend. legendtitle character string containing title legend. label_x, label_y character string vector character strings containing label x-axis y-axis. summet_size number determine size displayed summetric plot. point_size Either NULL number indicating size dots plot. Null default size specified ggplot. errorbar_size Either NULL number indicating size errorbars plot. Null default size specified ggplot. plot_title character string containing title plot. conf_adjustment conf_adjustment = TRUE confidence level confidence interval adjusted Bonferroni adjustment, account problem multiple comparisons. varlabels character string vector character strings containing new names variables, also used plot. ndigits number digits round numbers plot.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/plot_uni_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot univar data — plot_uni_compare","text":"Plot uni_compare object using ggplot2::ggplot2() shows difference two data frames.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/plot_uni_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot univar data — plot_uni_compare","text":"","code":"## Get Data for comparison  data(\"card\")  south <- card[card$south==1,] north <- card[card$south==0,] black <- card[card$black==1,] white <- card[card$black==0,]  ## use the function to plot the data  univar_data<-sampcompR::uni_compare(dfs = c(\"north\",\"white\"),                                     benchmarks = c(\"south\",\"black\"),                                     variables= c(\"age\",\"educ\",\"fatheduc\",\"motheduc\",\"wage\",\"IQ\"),                                     funct = \"abs_rel_mean\",                                     nboots=0,                                     summetric=\"rmse2\",                                     data=TRUE) #> Error in get(dfs[i]): object 'north' not found  sampcompR::plot_uni_compare(univar_data) #> Error: object 'univar_data' not found"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/sampcompR.html","id":null,"dir":"Reference","previous_headings":"","what":"sampcompR: A package for the comparison of samples — sampcompR","title":"sampcompR: A package for the comparison of samples — sampcompR","text":"Easily analyze visualize differences samples (e.g., benchmark comparisons, nonresponse comparisons surveys) three levels. comparisons can univariate, bivariate multivariate. univariate level variables interest survey comparison survey (.e. benchmark) compared, calculating one several difference measures (e.g., relative difference mean), average difference surveys. bivariate level function can calculate significant differences correlations surveys. multivariate levels function can calculate significant differences model coefficients surveys comparison. differences can easily plotted outputted table. Visualization based ggplot can edited plots ggplot afterwards.  detailed information methods example use see: Rohr, B., Silber, H., & Felderer, B. (2024). „Comparing Accuracy Univariate, Bivariate, Multivariate Estimates across Probability Non-Probability Surveys Population Benchmarks“ https://doi.org/10.31235/osf.io/n6ehf.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/sampcompR.html","id":"sampcompr-functions","dir":"Reference","previous_headings":"","what":"sampcompR functions","title":"sampcompR: A package for the comparison of samples — sampcompR","text":"uni_compare Compare Datasets Univariate Plot Differences plot_uni_compare Plot uni_compare objects uni_compare_table Get table output uni_compare object R_indicator Calculate R_indicator several surveys biv_compare Compare Datasets Bivariate Plot Differences plot_biv_compare Plot biv_compare objects biv_compare_table Get table output biv_compare object multi_compare Compare two Datasets Multivariate Level (GLM Model) plot_multi_compare Plot multi_compare objects multi_compare_table Get table output multi_compare objects multi_compare_merge Combine two multi_compare objects, plot together descriptive_table Get Descriptive Table Every Data Frame dataequalizer Equalize dataframes","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/sampcompR.html","id":"uni-compare-function","dir":"Reference","previous_headings":"","what":"uni_compare function","title":"sampcompR: A package for the comparison of samples — sampcompR","text":"uni_compare Returns data plot showing difference two data frames differences calculated base differing metrics, chosen funct argument. Results can visualized using plot_uni_compare.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/sampcompR.html","id":"biv-compare-function","dir":"Reference","previous_headings":"","what":"biv_compare function","title":"sampcompR: A package for the comparison of samples — sampcompR","text":"biv_compare Returns data heatmap difference two data frames, comparing correlation matrices. comparison based Pearson's r, calculated using rcorr function. Results can visualized using plot_biv_compare.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/sampcompR.html","id":"multi-compare-function","dir":"Reference","previous_headings":"","what":"multi_compare function","title":"sampcompR: A package for the comparison of samples — sampcompR","text":"multi_compare Returns data difference two data frames multivariate level. Similar (multivariate) regression models compared surveys. GLM models possible. Results can visualized using plot_multi_compare.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/sampcompR.html","id":"dataequalizer-function","dir":"Reference","previous_headings":"","what":"dataequalizer function","title":"sampcompR: A package for the comparison of samples — sampcompR","text":"dataequalizer compares two data frames looks data frames contain columns name. copy y returned, containing columns named identical x y data frames. function mainly used functions package. _PACKAGE","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/uni_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare data frames and Plot Differences — uni_compare","title":"Compare data frames and Plot Differences — uni_compare","text":"Returns data plot showing difference two data frames differences calculated base differing metrics, chosen funct argument. used data frames must contain least one column named equal data frames, equal values.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/uni_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare data frames and Plot Differences — uni_compare","text":"","code":"uni_compare(   dfs,   benchmarks,   variables = NULL,   nboots = 2000,   n_bench = NULL,   boot_all = FALSE,   funct = \"rel_mean\",   data = TRUE,   type = \"comparison\",   legendlabels = NULL,   legendtitle = NULL,   colors = NULL,   shapes = NULL,   summetric = \"rmse2\",   label_x = NULL,   label_y = NULL,   plot_title = NULL,   varlabels = NULL,   name_dfs = NULL,   name_benchmarks = NULL,   summet_size = 4,   silence = TRUE,   conf_level = 0.95,   conf_adjustment = NULL,   percentile_ci = TRUE,   weight = NULL,   id = NULL,   strata = NULL,   weight_bench = NULL,   id_bench = NULL,   strata_bench = NULL,   adjustment_weighting = \"raking\",   adjustment_vars = NULL,   raking_targets = NULL,   post_targets = NULL,   ndigits = 3,   parallel = FALSE )"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/uni_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare data frames and Plot Differences — uni_compare","text":"dfs character vector containing names data frames compare benchmarks. benchmarks character vector containing names benchmarks compare data frames . vector must either length dfs, length 1. length 1 every df compared benchmark. Benchmarks can either name data frames, name list tables, named vector means. tables list need named respective variables data frame comparison. named vector means, means need named respective variables dfs. variables character vector containing names variables comparison. NULL, variables named similarly dfs benchmarks compared. Variables missing one data frames benchmarks neglected comparison. nboots number bootstraps used calculate standard errors. Must either >2 0. >2 bootstrapping used calculate standard errors nboots iterations. 0, SE calculated analytically. recommend using nboots =0 method yet suitable every funct used every method. Depending size data number bootstraps, uni_compare can take . n_bench list vectors containing number cases every variable benchmark. needed, benchmark given vector. list long number dataframes boot_all TURE, , dfs benchmarks bootstrapped. Otherwise benchmark estimate assumed constant. funct character string, indicating function calculate difference data frames. Predefined functions : \"d_mean\", \"ad_mean\" function calculate (absolute) difference mean variables dfs benchmarks name. applicable metric variables. \"d_prop\", \"ad_prop\" function calculate (absolute) difference proportions variables dfs benchmarks name. applicable dummy variables. \"rel_mean\", \"abs_rel_mean\" function calculate (absolute) relative difference mean variables dfs benchmarks name. #' information formula difference analytic variance, see Felderer et al. (2019). applicable metric variables. \"rel_prop\", \"abs_rel_prop\" function calculate (absolute) relative difference proportions variables dfs benchmarks name. calculated similar relative difference mean (see Felderer et al., 2019), however default label plot different. applicable dummy variables. data TRUE, uni_compare_object returned, containing results comparison. type Define type comparison. Can either \"comparison\" \"nonresponse\". legendlabels character string vector strings containing label legend. legendtitle character string containing title legend. colors vector colors, used plot different comparisons. shapes vector shapes applicable ggplot2::ggplot2(), used plot different comparisons. summetric \"avg1\", \"mse1\", \"rmse1\", \"R\" respective measure calculated biases survey. values \"mse1\" \"rmse1\" lead similar results \"mse2\" \"rmse2\", slightly different visualization plot. summetric = NULL, summetric displayed Plot. \"R\" chosen, also response_identificator needed. label_x, label_y character string vector character strings containing label x-axis y-axis. plot_title character string containing title plot. varlabels character string vector character strings containing new names variables, also used plot. name_dfs, name_benchmarks character string vector character strings containing new names dfs benchmarks, also used plot. summet_size number determine size displayed summetric plot. silence silence = FALSE warning displayed, variables re excluded either data frame benchmark, existing . conf_level numeric value zero one determine confidence level confidence interval. conf_adjustment conf_adjustment = TRUE confidence level confidence interval adjusted Bonferroni adjustment, account problem multiple comparisons. percentile_ci TURE, cofidence intervals calculated using percentile method. False, calculated using normal method. weight, weight_bench character vector determining variables weight dfs benchmarks. part respective data frame. one character provided, variable used weigh every df benchmark. weight variable provided also id variable needed.weighting, survey package used. id, id_bench character vector determining id variables used weigh dfs benchmarks help survey package. part respective data frame. one character provided, variable used weigh every df benchmark. strata, strata_bench character vector determining strata variables used weigh dfs benchmarks help survey package.part respective data frame. one character provided, variable used weight every df benchmark. adjustment_weighting character vector indicating adjustment weighting used. can either \"raking\" \"post_start\". adjustment_vars Variables used adjust survey using raking post stratification. raking_targets list raking targets can given rake function rake, rake dfs. post_targets list post-stratification targets can given postStratify function, post-stratify dfs. ndigits number digits round numbers plot. parallel Can either FALSE number cores used function. FALSE, one core used otherwise given number cores used.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/uni_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare data frames and Plot Differences — uni_compare","text":"plot based ggplot2::ggplot2() (data frame data==TRUE) shows difference two data frames predetermined variables, named identical data frames.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/uni_compare.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compare data frames and Plot Differences — uni_compare","text":"Felderer, B., Kirchner, ., & Kreuter, FALSE. (2019). Effect Survey Mode Data Quality: Disentangling Nonresponse Measurement Error Bias. Journal Official Statistics, 35(1), 93–115. https://doi.org/10.2478/jos-2019-0005","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/uni_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare data frames and Plot Differences — uni_compare","text":"","code":"## Get Data for comparison  data(\"card\")  north<-card[card$south==0,] white<-card[card$black==0,]  ## use the function to plot the data  univar_comp<-sampcompR::uni_compare(dfs = c(\"north\",\"white\"),                                     benchmarks = c(\"card\",\"card\"),                                     variables= c(\"age\",\"educ\",\"fatheduc\",\"motheduc\",\"wage\",\"IQ\"),                                     funct = \"abs_rel_mean\",                                     nboots=200,                                     summetric=\"rmse2\",                                     data=FALSE) #> Error in get(dfs[i]): object 'north' not found   univar_comp #> Error: object 'univar_comp' not found"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/uni_compare_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Output-Table of a uni_compare_object — uni_compare_table","title":"Create an Output-Table of a uni_compare_object — uni_compare_table","text":"Returns table based information uni_compare_object can outputted HTML LaTex Table, example help stargazer function.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/uni_compare_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Output-Table of a uni_compare_object — uni_compare_table","text":"","code":"uni_compare_table(   uni_compare_object,   conf_adjustment = FALSE,   df_names = NULL,   varlabels = NULL,   ci_line = TRUE,   ndigits = 3 )"},{"path":"https://bjoernrohr.github.io/sampcompR/reference/uni_compare_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Output-Table of a uni_compare_object — uni_compare_table","text":"uni_compare_object object returned uni_compare. conf_adjustment logical parameter determining adjusted confidence intervals returned. df_names character vector relabel data frames comparison. varlabels character vector relabel variables table. ci_line TRUE, confidence intervals displayed separate line, otherwise, shown line instead. ndigits number digits round numbers table.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/uni_compare_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Output-Table of a uni_compare_object — uni_compare_table","text":"table containing information univariate comparison based uni_compare function.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/reference/uni_compare_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Output-Table of a uni_compare_object — uni_compare_table","text":"","code":"## Get Data for comparison  data(\"card\")  north <- card[card$south==0,] white <- card[card$black==0,]  ## use the function to plot the data  univar_data<-sampcompR::uni_compare(dfs = c(\"north\",\"white\"),                                     benchmarks = c(\"card\",\"card\"),                                     variables= c(\"age\",\"educ\",\"fatheduc\",\"motheduc\",\"wage\",\"IQ\"),                                     funct = \"abs_rel_mean\",                                     nboots=0,                                     summetric=\"rmse2\",                                     data=TRUE) #> Error in get(dfs[i]): object 'north' not found  table<-sampcompR::uni_compare_table(univar_data) #> Error: object 'univar_data' not found noquote(table) #> function (..., exclude = if (useNA == \"no\") c(NA, NaN), useNA = c(\"no\",  #>     \"ifany\", \"always\"), dnn = list.names(...), deparse.level = 1)  #> { #>     list.names <- function(...) { #>         l <- as.list(substitute(list(...)))[-1L] #>         if (length(l) == 1L && is.list(..1) && !is.null(nm <- names(..1)))  #>             return(nm) #>         nm <- names(l) #>         fixup <- if (is.null(nm))  #>             seq_along(l) #>         else nm == \"\" #>         dep <- vapply(l[fixup], function(x) switch(deparse.level +  #>             1, \"\", if (is.symbol(x)) as.character(x) else \"\",  #>             deparse(x, nlines = 1)[1L]), \"\") #>         if (is.null(nm))  #>             dep #>         else { #>             nm[fixup] <- dep #>             nm #>         } #>     } #>     miss.use <- missing(useNA) #>     miss.exc <- missing(exclude) #>     useNA <- if (miss.use && !miss.exc && !match(NA, exclude,  #>         nomatch = 0L))  #>         \"ifany\" #>     else match.arg(useNA) #>     doNA <- useNA != \"no\" #>     if (!miss.use && !miss.exc && doNA && match(NA, exclude,  #>         nomatch = 0L))  #>         warning(\"'exclude' containing NA and 'useNA' != \\\"no\\\"' are a bit contradicting\") #>     args <- list(...) #>     if (length(args) == 1L && is.list(args[[1L]])) { #>         args <- args[[1L]] #>         if (length(dnn) != length(args))  #>             dnn <- paste(dnn[1L], seq_along(args), sep = \".\") #>     } #>     if (!length(args))  #>         stop(\"nothing to tabulate\") #>     bin <- 0L #>     lens <- NULL #>     dims <- integer() #>     pd <- 1L #>     dn <- NULL #>     for (a in args) { #>         if (is.null(lens))  #>             lens <- length(a) #>         else if (length(a) != lens)  #>             stop(\"all arguments must have the same length\") #>         fact.a <- is.factor(a) #>         if (doNA)  #>             aNA <- anyNA(a) #>         if (!fact.a) { #>             a0 <- a #>             op <- options(warn = 2) #>             on.exit(options(op)) #>             a <- factor(a, exclude = exclude) #>             options(op) #>         } #>         add.na <- doNA #>         if (add.na) { #>             ifany <- (useNA == \"ifany\") #>             anNAc <- anyNA(a) #>             add.na <- if (!ifany || anNAc) { #>                 ll <- levels(a) #>                 if (add.ll <- !anyNA(ll)) { #>                   ll <- c(ll, NA) #>                   TRUE #>                 } #>                 else if (!ifany && !anNAc)  #>                   FALSE #>                 else TRUE #>             } #>             else FALSE #>         } #>         if (add.na)  #>             a <- factor(a, levels = ll, exclude = NULL) #>         else ll <- levels(a) #>         a <- as.integer(a) #>         if (fact.a && !miss.exc) { #>             ll <- ll[keep <- which(match(ll, exclude, nomatch = 0L) ==  #>                 0L)] #>             a <- match(a, keep) #>         } #>         else if (!fact.a && add.na) { #>             if (ifany && !aNA && add.ll) { #>                 ll <- ll[!is.na(ll)] #>                 is.na(a) <- match(a0, c(exclude, NA), nomatch = 0L) >  #>                   0L #>             } #>             else { #>                 is.na(a) <- match(a0, exclude, nomatch = 0L) >  #>                   0L #>             } #>         } #>         nl <- length(ll) #>         dims <- c(dims, nl) #>         if (prod(dims) > .Machine$integer.max)  #>             stop(\"attempt to make a table with >= 2^31 elements\") #>         dn <- c(dn, list(ll)) #>         bin <- bin + pd * (a - 1L) #>         pd <- pd * nl #>     } #>     names(dn) <- dnn #>     bin <- bin[!is.na(bin)] #>     if (length(bin))  #>         bin <- bin + 1L #>     y <- array(tabulate(bin, pd), dims, dimnames = dn) #>     class(y) <- \"table\" #>     y #> } #> <bytecode: 0x563b2db98ea8> #> <environment: namespace:base>"},{"path":[]},{"path":"https://bjoernrohr.github.io/sampcompR/news/index.html","id":"changes-in-version-development-version","dir":"Changelog","previous_headings":"","what":"Changes in version 0.3.1 (2025-13-03)","title":"sampcompR (development version)","text":"Added two parameter plot_uni_compare adjust size dots errorbars","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/news/index.html","id":"changes-in-version-development-version-1","dir":"Changelog","previous_headings":"","what":"Changes in version 0.3.0 (2025-02-03)","title":"sampcompR (development version)","text":"fix small bug shapes plot_uni_compare add new function, create heatmap relative bias bivariate comparison add new function, show AAB AARB Pearson’s r per variable table add new function, calculate missings per variable display table","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/news/index.html","id":"changes-in-version-development-version-2","dir":"Changelog","previous_headings":"","what":"Changes in version 0.2.7 (2025-21-01)","title":"sampcompR (development version)","text":"fixed small error biv_compare occurred sample size small ended Error message. Added absolute relative bias biv_compare output","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/news/index.html","id":"changes-in-version-development-version-3","dir":"Changelog","previous_headings":"","what":"Changes in version 0.2.6 (2024-14-11)","title":"sampcompR (development version)","text":"wooldridge package archived CRAN, examples rely card data wooldridge, added card data package","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/news/index.html","id":"changes-in-version-development-version-4","dir":"Changelog","previous_headings":"","what":"Changes in version 0.2.5 (2024-14-11)","title":"sampcompR (development version)","text":"Added possibility input benchmarks named vector means univariate comparison Fixed small errors uni_compare_table functions occurred one benchmark survey compared. Changed example show bias comparison (estimating bias white respondents north respondents recruited)","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/news/index.html","id":"changes-in-version-development-version-5","dir":"Changelog","previous_headings":"","what":"Changes in version 0.2.4 (2024-10-11)","title":"sampcompR (development version)","text":"Added parameters allow bootstrap benchmark survey Added parameter allow choose percentile normal bootstrap confidence intervals p-values based intervals.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/news/index.html","id":"changes-in-version-development-version-6","dir":"Changelog","previous_headings":"","what":"Changes in version 0.2.3 (2024-19-08)","title":"sampcompR (development version)","text":"Additional small Fix test","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/news/index.html","id":"changes-in-version-development-version-7","dir":"Changelog","previous_headings":"","what":"Changes in version 0.2.2 (2024-22-07)","title":"sampcompR (development version)","text":"Small Fix test CRAN MacOS","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/news/index.html","id":"changes-in-version-development-version-8","dir":"Changelog","previous_headings":"","what":"Changes in version 0.2.1 (2024-14-07)","title":"sampcompR (development version)","text":"added biv_per_variable() function calculate average bias per variable bivariate comparison, average bias per variable across comparisons. added multi_per_variable() function calculate average bias per coefficient per model, multivariate comparison, average biases per coefficient per model across comparisons.","code":""},{"path":"https://bjoernrohr.github.io/sampcompR/news/index.html","id":"changes-in-version-development-version-9","dir":"Changelog","previous_headings":"","what":"Changes in version 0.2.0 (2024-08-07)","title":"sampcompR (development version)","text":"implemented better bootstrapping, use weighting every bootstrap iteration, main functions (, , . functions much faster bootstrapping now. possibility weight dataset benchmark using  .","code":""}]
